openapi: 3.0.1
info:
  title: WIEDPUG API
  description: API Documentation for the WIEDPUG Network
  termsOfService: https://wiedpug.github.io/wiedpug
  contact:
    name: WIEDPUG Team
    url: https://wiedpug.github.io/wiedpug
    email: changethis@email.com
  license:
    name: Applicable License
    url: https://wiedpug.github.io/wiedpug
  version: v1.0
paths:
  /v1/auction-catalogue:
    post:
      tags:
        - Auction Catalogue
      summary: Transmit new Auction Catalogues and Private Catalogues
      description: Used by brokers to transmit Original broadcast and private auction catalogue data to the Network for auctions regulated by the Australian Wool Exchange Limited.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AuctionCatalogue'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
  /v1/auction-catalogue/updates:
    post:
      tags:
        - Auction Catalogue
      summary: Transmit Auction Catalogue Updates
      description: Used by brokers to transmit broadcast and private auction catalogue data updates to the Network for auctions regulated by the Australian Wool Exchange Limited.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AuctionCatalogue'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
  /v1/auction-catalogue/data:
    post:
      tags:
        - Auction Catalogue
      summary: 'Request for Data relating to Auction Catalogue, Private Catalogue and Auction Catalogue Updates'
      description: 'Used by brokers to request Private and Broadcast data, as well as Re-requesting data for Auction Catalogues, Private Catalogues, and Auction Catalogue Updates'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestForDataForAuctionCatalogue'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionCatalogueListApiResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
  /v1/organization-details:
    post:
      tags:
        - Organization Details
      summary: Create or upload the organization details
      operationId: CreateOrganizationDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDetails'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
  /v1/organization-details/data:
    post:
      tags:
        - Organization Details
      summary: Retrieves the organizationdetails
      operationId: GetOrganizationDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOrganizationDetailsRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
  '/v1/organization-details/{id}':
    get:
      tags:
        - Organization Details
      summary: Retrieves the organizationdetail by id
      operationId: GetOrganizationDetailsById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
    put:
      tags:
        - Organization Details
      summary: Update the organization detail by id
      operationId: UpdateOrganizationDetailsById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDetail'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
    delete:
      tags:
        - Organization Details
      summary: Delete or Deactivate organization detail by id
      operationId: DeleteOrganizationDetailsById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
  /v1/request-for-details-or-status:
    post:
      tags:
        - Request for Data/Status
      summary: Send Request for Details/Status
      description: Retrieves the requested details or status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestForDataOrStatus'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
  /v1/status:
    post:
      tags:
        - Request for Status
      summary: Request for Status
      description: Used by brokers to request status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestForStatus'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusReplyApiResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
  /v1/test-certificates:
    post:
      tags:
        - Test Certificates
      summary: Create or upload the test certificates
      operationId: CreateTestCertificates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCertificates'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
  /v1/test-certificates/data:
    post:
      tags:
        - Test Certificates
      summary: Retrieves the test certificates
      operationId: GetTestCertificates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTestCertificatesRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CustomProblemDetails'
components:
  schemas:
    Address:
      type: object
      properties:
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        organizationName:
          type: string
          nullable: true
        premise:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        suburb:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        regionOrState:
          type: string
          nullable: true
        postalCode:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
      additionalProperties: false
    AdjustmentNoteDetails:
      required:
        - certificateIdentityOriginal
        - client
        - creditNoteAmount
        - creditNoteInvoiceNumber
        - dateOfCreditNote
        - dateOfOriginalInvoice
        - gstAmount
        - isGSTApplicable
        - newCertificateIdentity
        - reasonCode
      type: object
      properties:
        client:
          $ref: '#/components/schemas/Client'
        creditNoteInvoiceNumber:
          type: integer
          format: int32
        dateOfCreditNote:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          format: date
        creditNoteAmount:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        isGSTApplicable:
          type: boolean
        gstAmount:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        reasonCode:
          minLength: 1
          type: string
        certificateIdentityOriginal:
          minLength: 1
          type: string
        dateOfOriginalInvoice:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          format: date
        newCertificateIdentity:
          minLength: 1
          type: string
      additionalProperties: false
    ApiResult:
      required:
        - isSuccessful
      type: object
      properties:
        isSuccessful:
          type: boolean
          description: Indicator if the request has been successfully processed.
        message:
          type: string
          description: Contains information about the response if applicable.
          nullable: true
        data:
          description: Contains response data. e.g. Auction Catalogue
          nullable: true
      additionalProperties: false
      description: A standard API response object used for all successful API responses
    AuctionCatalogue:
      required:
        - transmissionHeader
        - woolSaleHeaders
      type: object
      properties:
        transmissionHeader:
          $ref: '#/components/schemas/TransmissionHeader'
        woolSaleHeaders:
          type: array
          items:
            $ref: '#/components/schemas/AuctionCatalogueWoolSaleHeader'
      additionalProperties: false
    AuctionCatalogueListApiResult:
      required:
        - isSuccessful
      type: object
      properties:
        isSuccessful:
          type: boolean
          description: Indicator if the request has been successfully processed.
        message:
          type: string
          description: Contains information about the response if applicable.
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuctionCatalogue'
          description: Contains response data. e.g. Auction Catalogue
          nullable: true
      additionalProperties: false
      description: A standard API response object used for all successful API responses
    AuctionCatalogueWoolSaleHeader:
      required:
        - lots
        - woolSaleHeaderExtension
        - woolSaleHeaderLots
      type: object
      properties:
        woolSaleHeaderLots:
          $ref: '#/components/schemas/WoolSaleHeaderLots'
        woolSaleHeaderExtension:
          $ref: '#/components/schemas/WoolSaleHeaderExtension'
        woolSaleHeaderNonAuction:
          $ref: '#/components/schemas/WoolSaleHeaderNonAuction'
        lots:
          type: array
          items:
            $ref: '#/components/schemas/AuctionCatalogueWoolSaleHeaderLot'
      additionalProperties: false
    AuctionCatalogueWoolSaleHeaderLot:
      required:
        - lotHeaderVendorDeclarations
      type: object
      properties:
        lotHeader:
          $ref: '#/components/schemas/LotHeader'
        lotHeaderExtension:
          $ref: '#/components/schemas/LotHeaderExtension'
        lotHeaderPricings:
          maxItems: 2
          type: array
          items:
            $ref: '#/components/schemas/LotHeaderPricingData'
          nullable: true
        lotHeaderAwexData:
          $ref: '#/components/schemas/LotHeaderAwexData'
        lotHeaderVendorDeclarations:
          type: array
          items:
            $ref: '#/components/schemas/LotHeaderVendorDeclaration'
        colourDetails:
          $ref: '#/components/schemas/ColourDetails'
        premiumTestDetails:
          $ref: '#/components/schemas/PremiumTestDetails'
        subjectiveInterlotDetails:
          $ref: '#/components/schemas/SubjectiveInterlotDetails'
        combinationDetails:
          $ref: '#/components/schemas/CombinationDetails'
        lengthAndStrengthCombDetails:
          $ref: '#/components/schemas/LengthAndStrengthCombDetails'
        lengthAndStrengthDetails:
          $ref: '#/components/schemas/LengthAndStrengthDetails'
        omlDetails:
          $ref: '#/components/schemas/OMLDetails'
        coreTestDetails:
          $ref: '#/components/schemas/CoreTestDetails'
        colourCombinationDetails:
          $ref: '#/components/schemas/ColourCombinationDetails'
        omiDetails:
          $ref: '#/components/schemas/OMIDetails'
        histograms:
          type: array
          items:
            $ref: '#/components/schemas/FibreDiameterHistogram'
          nullable: true
        catalogueLotDescription:
          $ref: '#/components/schemas/CatalogueLotDescription'
        baleIdentifications:
          type: array
          items:
            $ref: '#/components/schemas/BaleIdentification'
          description: This field is completely optional when sending Auction Catalogue Updates
          nullable: true
        interlotComponentBales:
          type: array
          items:
            $ref: '#/components/schemas/AuctionCatalogueWoolSaleHeaderLotInterlotComponentBale'
          description: This field is completely optional when sending Auction Catalogue Updates
          nullable: true
      additionalProperties: false
    AuctionCatalogueWoolSaleHeaderLotInterlotComponentBale:
      required:
        - interlotComponentBaleHeader
      type: object
      properties:
        interlotComponentBaleHeader:
          $ref: '#/components/schemas/InterlotComponentBaleHeader'
        baleIdentifications:
          type: array
          items:
            $ref: '#/components/schemas/BaleIdentification'
          nullable: true
      additionalProperties: false
    Bale:
      type: object
      properties:
        baleHeader:
          $ref: '#/components/schemas/BaleHeader'
        baleDetails:
          type: array
          items:
            $ref: '#/components/schemas/BaleDetail'
          nullable: true
      additionalProperties: false
    BaleDetail:
      required:
        - baleDetailType
        - baleNumber
        - gross
        - tare
      type: object
      properties:
        baleNumber:
          minLength: 1
          type: string
        baleDetailType:
          $ref: '#/components/schemas/BaleDetailType'
        showBaleIndicator:
          type: string
          description: 'Property for Greasy/Processed bale detail, not necessary for other types of bale details.'
          nullable: true
        baleRenumber:
          type: string
          description: 'Property for Renumber BaleDetail, not necessary for other types of bale details.'
          nullable: true
        unitNumber:
          type: integer
          description: 'Property for Tripacks BaleDetail, not necessary for other types of bale details.'
          format: int32
          nullable: true
        gross:
          type: integer
          format: int32
        tare:
          type: integer
          format: int32
        baleIdentifications:
          type: array
          items:
            $ref: '#/components/schemas/BaleIdentification'
          nullable: true
      additionalProperties: false
    BaleDetailType:
      enum:
        - Renumbers
        - GreasyOrProcessed
        - Tripacks
      type: string
      description: 'Renumbers: Bale Details - Renumbers<br />GreasyOrProcessed: Bale Details - GreasyOrProcessed<br />Tripacks: Bale Details - Tripacks'
    BaleHeader:
      required:
        - areaOfOrigin
        - baleDescription
        - brand
      type: object
      properties:
        brand:
          minLength: 1
          type: string
        baleDescription:
          minLength: 1
          type: string
        areaOfOrigin:
          minLength: 1
          type: string
        locationWithinStore:
          type: string
          nullable: true
      additionalProperties: false
    BaleIdentification:
      type: object
      properties:
        baleNumber:
          type: string
          nullable: true
        eBaleId:
          type: string
          nullable: true
      additionalProperties: false
    CalculationBasis:
      enum:
        - B
        - K
        - P
      type: string
      description: 'This is used to identify the method used to calculate the post sale charge. The post sale charge may be a per bale, per kilogram or percentage of the price of the wool. Calculation Basis is always per bale in Australia.<br />B: Post sale charge is levied per bale<br />K: The post sale charge is a charge per kil<br />P: The post sale charge is a % of first cost'
    CalibrationFlag:
      enum:
        - O
        - N
      type: string
      description: 'O: Old. The values for Colour X, Y, Z and Y-Z have been measured by an instrument calibrated to reference wool, based on illuminant C and 2º observer angle. Old calibration has been deactivated as at 1st January 2001.<br />N: New. The values for Colour X, Y, Z and Y-Z have been measured by an instrument calibrated to certified tiles, based on illuminant D65 and 10º observer angle, and corrected for any glass effects'
    CatalogueLotDescription:
      required:
        - baleDescription
        - bales
        - brand
      type: object
      properties:
        brand:
          minLength: 1
          type: string
        baleDescription:
          minLength: 1
          type: string
        areaOfOrigin:
          type: string
          nullable: true
        locationWithinStore:
          type: string
          nullable: true
        bales:
          type: integer
          format: int32
        postcode:
          type: string
          nullable: true
      additionalProperties: false
    CatalogueSection:
      enum:
        - BLK
        - DEAD
        - FLC
        - FMG
        - ODD
        - SKIN
        - SKT
        - TRAD
        - XBD
      type: string
      description: 'These are the codes allocated by the local wool authorities to sectionalise the sale catalogues.<br />BLK: ODDS - Black<br />DEAD: ODDS - Dead<br />FLC: MFLC - Merino Fleece<br />FMG: ODDS - Fellmongered<br />ODD: ODDS - Oddments<br />SKIN: ODDS - Skin Wool<br />SKT: MSKT - Skirting<br />TRAD: MFLC / MSKT / XBFS / ODDS - Traditionally Shown<br />XBD: C XBFS - Crossbred (Flc & Skt)'
    CatalogueSymbol:
      enum:
        - A
        - C
        - D
        - G
        - H
        - M
        - O
        - R
        - S
        - T
        - U
        - W
        - X
        - Y
      type: string
      description: 'These are the symbols defined in the AWEX Wool Selling Rules. If this field has no value, it will indicate that there are no catalogue symbols for that lotTo obtain the current code list of values that may be used in this field please go to this URL: http://www.awex.com.au/standards/catalogue<br />A: Dumped Bales<br />C: Charity/Good Cause<br />D: De-banded<br />G: Lot offered under Trial Selling Status<br />H: Classed Samples (bearing Classing House stencil)<br />M: Machine processed (Decotted, crushed or blended)<br />O: Fellmongered<br />R: Reconditioned from wet<br />S: Wool is unclassed<br />T: Tested (where Test House is not AWTA)<br />U: Unskirted or Not Skirted to Code of Practice requirements<br />W: Broker (Re)classed (Classing House stencil - P cert. only)<br />X: Contains Broker Inspected (Classing House stencil - I cert. only)<br />Y: Pigmented and/or Medullated Fibre Risk (Run with or Black section)'
    Centre:
      enum:
        - AU_A
        - AU_AD
        - AU_AR
        - AU_AU
        - AU_B
        - AU_BA
        - AU_BK
        - AU_BL
        - AU_BM
        - AU_BO
        - AU_BR
        - AU_BT
        - AU_C
        - AU_CA
        - AU_CB
        - AU_CC
        - AU_CL
        - AU_CN
        - AU_CO
        - AU_CR
        - AU_CU
        - AU_CW
        - AU_D
        - AU_DE
        - AU_DO
        - AU_DR
        - AU_E
        - AU_ER
        - AU_ES
        - AU_F
        - AU_G
        - AU_GF
        - AU_GI
        - AU_GN
        - AU_GR
        - AU_GU
        - AU_H
        - AU_HA
        - AU_HB
        - AU_HM
        - AU_HO
        - AU_HY
        - AU_I
        - AU_J
        - AU_JA
        - AU_K
        - AU_KE
        - AU_KH
        - AU_KI
        - AU_KN
        - AU_KT
        - AU_KW
        - AU_KY
        - AU_L
        - AU_LC
        - AU_M
        - AU_MA
        - AU_MB
        - AU_MC
        - AU_ME
        - AU_MG
        - AU_MI
        - AU_MO
        - AU_MR
        - AU_MU
        - AU_N
        - AU_NA
        - AU_ND
        - AU_NO
        - AU_NR
        - AU_OB
        - AU_OR
        - AU_P
        - AU_PA
        - AU_PL
        - AU_Q
        - AU_QU
        - AU_R
        - AU_S
        - AU_SG
        - AU_SH
        - AU_SK
        - AU_SW
        - AU_SY
        - AU_T
        - AU_TE
        - AU_U
        - AU_UR
        - AU_V
        - AU_W
        - AU_WA
        - AU_WG
        - AU_WL
        - AU_WN
        - AU_WR
        - AU_WW
        - AU_X
        - AU_Y
        - AU_YA
        - AU_YM
        - AU_YO
        - AU_Z
        - OS_ZA
        - OS_ZB
        - OS_ZC
        - OS_ZD
        - OS_ZE
        - OS_ZF
        - OS_ZG
        - OS_ZH
        - OS_ZI
        - OS_ZJ
        - OS_ZK
        - OS_ZL
        - OS_ZM
        - OS_ZN
        - OS_ZO
        - OS_ZP
        - OS_ZQ
        - OS_ZR
        - OS_ZS
        - OS_ZT
        - OS_ZU
        - OS_ZV
        - OS_ZW
        - OS_ZX
        - OS_ZY
        - OS_ZZ
        - NZ_A
        - NZ_AW
        - NZ_B
        - NZ_BL
        - NZ_BT
        - NZ_C
        - NZ_CV
        - NZ_D
        - NZ_F
        - NZ_FA
        - NZ_G
        - NZ_GD
        - NZ_GO
        - NZ_HA
        - NZ_HS
        - NZ_I
        - NZ_J
        - NZ_K
        - NZ_KA
        - NZ_KP
        - NZ_L
        - NZ_LO
        - NZ_LU
        - NZ_M
        - NZ_MA
        - NZ_MK
        - NZ_MT
        - NZ_MU
        - NZ_N
        - NZ_NE
        - NZ_O
        - NZ_OH
        - NZ_OI
        - NZ_OM
        - NZ_OT
        - NZ_P
        - NZ_PT
        - NZ_PU
        - NZ_R
        - NZ_RG
        - NZ_RI
        - NZ_S
        - NZ_SA
        - NZ_SH
        - NZ_SY
        - NZ_T
        - NZ_TA
        - NZ_TE
        - NZ_TH
        - NZ_TP
        - NZ_U
        - NZ_V
        - NZ_W
        - NZ_WH
        - NZ_WI
        - NZ_WR
        - NZ_WT
        - NZ_WU
        - NZ_X
        - NZ_Y
        - NZ_YP
        - NZ_Z
      type: string
      description: 'This is combined Centres for Australia, Overseas and New Zealand. A centre is a town where any activity connected with the wool industry takes place. The codes used in transmissions are those defined in the Australian Wool Selling Regulation.<br />AU_A: Australia - ADELAIDE<br />AU_AD: Australia - Ardlethan<br />AU_AR: Australia - Armidale (NSW)<br />AU_AU: Australia - AUSTRALIA (AWEX internal only)<br />AU_B: Australia - BRISBANE<br />AU_BA: Australia - Benalla<br />AU_BK: Australia - Bourke<br />AU_BL: Australia - Ballarat<br />AU_BM: Australia - Barham<br />AU_BO: Australia - Boorowa<br />AU_BR: Australia - Bordertown<br />AU_BT: Australia - Bathurst<br />AU_C: Australia - Cooma<br />AU_CA: Australia - Casterton<br />AU_CB: Australia - Coonabarabran<br />AU_CC: Australia - Culcairn<br />AU_CL: Australia - Coleraine<br />AU_CN: Australia - Condoblin<br />AU_CO: Australia - Cootamundra<br />AU_CR: Australia - Corowa<br />AU_CU: Australia - Cunnamulla<br />AU_CW: Australia - Crookwell<br />AU_D: Australia - Bendigo<br />AU_DE: Australia - Deniliquin<br />AU_DO: Australia - Dubbo<br />AU_DR: Australia - Canowindra<br />AU_E: Australia - Echuca<br />AU_ER: Australia - Euroa<br />AU_ES: Australia - Esperance<br />AU_F: Australia - FREMANTLE<br />AU_G: Australia - GEELONG<br />AU_GF: Australia - Grenfell<br />AU_GI: Australia - Glenn Innes<br />AU_GN: Australia - Gunning<br />AU_GR: Australia - Griffith<br />AU_GU: Australia - Guyra<br />AU_H: Australia - Hobart<br />AU_HA: Australia - Harden<br />AU_HB: Australia - Holbrook<br />AU_HM: Australia - Hamilton<br />AU_HO: Australia - Horsham<br />AU_HY: Australia - Hay<br />AU_I: Australia - Narrabri<br />AU_J: Australia - Parkes<br />AU_JA: Australia - Jamestown<br />AU_K: Australia - Warracknabeal<br />AU_KE: Australia - Kerang<br />AU_KH: Australia - Keith<br />AU_KI: Australia - Kangaroo Island<br />AU_KN: Australia - Kingston<br />AU_KT: Australia - Katanning<br />AU_KW: Australia - Wagga Wagga<br />AU_KY: Australia - Kyneton<br />AU_L: Australia - LAUNCESTON<br />AU_LC: Australia - Lane Cove (AWEX internal only)<br />AU_M: Australia - MELBOURNE<br />AU_MA: Australia - Mansfield<br />AU_MB: Australia - Murray Bridge<br />AU_MC: Australia - Macarthur<br />AU_ME: Australia - Melton<br />AU_MG: Australia - Mount Gambier<br />AU_MI: Australia - Mildura<br />AU_MO: Australia - Moree<br />AU_MR: Australia - Maryborough<br />AU_MU: Australia - Mudgee<br />AU_N: Australia - NEWCASTLE<br />AU_NA: Australia - Narrandera<br />AU_ND: Australia - Goondiwindi<br />AU_NO: Australia - Northam<br />AU_NR: Australia - Naracoorte<br />AU_OB: Australia - Oberon<br />AU_OR: Australia - Orange<br />AU_P: Australia - Portland<br />AU_PA: Australia - Cowra<br />AU_PL: Australia - Port Lincoln<br />AU_Q: Australia - Yarrawonga<br />AU_QU: Australia - Queanbeyan<br />AU_R: Australia - GOULBURN<br />AU_S: Australia - SYDNEY<br />AU_SG: Australia - St George<br />AU_SH: Australia - Shepparton<br />AU_SK: Australia - Skipton<br />AU_SW: Australia - Swan Hill<br />AU_SY: Australia - Seymour<br />AU_T: Australia - Inverell<br />AU_TE: Australia - Temora<br />AU_U: Australia - Auburn<br />AU_UR: Australia - Uralla<br />AU_V: Australia - Forbes<br />AU_W: Australia - Tamworth<br />AU_WA: Australia - Warren<br />AU_WG: Australia - Walgett<br />AU_WL: Australia - Walcha<br />AU_WN: Australia - Wellington<br />AU_WR: Australia - Wangaratta<br />AU_WW: Australia - West Wyalong<br />AU_X: Australia - Ararat<br />AU_Y: Australia - Albury<br />AU_YA: Australia - Yass<br />AU_YM: Australia - Yarram<br />AU_YO: Australia - Young<br />AU_Z: Australia - Albany<br />OS_ZA: Overseas - Australia<br />OS_ZB: Overseas - Belgium<br />OS_ZC: Overseas - Christchurch - New Zealand<br />OS_ZD: Overseas - Dunedin - New Zealand<br />OS_ZE: Overseas - England<br />OS_ZF: Overseas - France<br />OS_ZG: Overseas - Germany<br />OS_ZH: Overseas - Blumenthal - Germany<br />OS_ZI: Overseas - Italy<br />OS_ZJ: Overseas - Biella - Italy<br />OS_ZK: Overseas - Grisignano - Italy<br />OS_ZL: Overseas - Mosgiel - New Zealand<br />OS_ZM: Overseas - Nanjing - China<br />OS_ZN: Overseas - Netherlands<br />OS_ZO: Overseas - Keelung - Taiwan<br />OS_ZP: Overseas - Shanghai - China<br />OS_ZQ: Overseas - Qingdao - China<br />OS_ZR: Overseas - Zhangjiagang - China<br />OS_ZS: Overseas - South Africa<br />OS_ZT: Overseas - Timaru - New Zealand<br />OS_ZU: Overseas - USA<br />OS_ZV: Overseas - Invercargill - New Zealand<br />OS_ZW: Overseas - Wellington - New Zealand<br />OS_ZX: Overseas - Napier - New Zealand<br />OS_ZY: Overseas - Ashburton - New Zealand<br />OS_ZZ: Overseas - New Zealand<br />NZ_A: New Zealand - Auckland<br />NZ_AW: New Zealand - Awatoto<br />NZ_B: New Zealand - Cambridge<br />NZ_BL: New Zealand - Blenheim<br />NZ_BT: New Zealand - Bunnythorpe<br />NZ_C: New Zealand - Christchurch<br />NZ_CV: New Zealand - Clive<br />NZ_D: New Zealand - Dunedin<br />NZ_F: New Zealand - Feilding<br />NZ_FA: New Zealand - Fairlie<br />NZ_G: New Zealand - Gisborne<br />NZ_GD: New Zealand - Geraldine<br />NZ_GO: New Zealand - Gore<br />NZ_HA: New Zealand - Hawera<br />NZ_HS: New Zealand - Hastings<br />NZ_I: New Zealand - Invercargill<br />NZ_J: New Zealand - Tapanui<br />NZ_K: New Zealand - Te Kuiti<br />NZ_KA: New Zealand - Kakariki<br />NZ_KP: New Zealand - Kaiapoi<br />NZ_L: New Zealand - Mosgiel<br />NZ_LO: New Zealand - Longburn<br />NZ_LU: New Zealand - Lumsden<br />NZ_M: New Zealand - Masterton<br />NZ_MA: New Zealand - Mangatinoka<br />NZ_MK: New Zealand - Motueka<br />NZ_MT: New Zealand - Milton<br />NZ_MU: New Zealand - Mataura<br />NZ_N: New Zealand - Napier<br />NZ_NE: New Zealand - Nelson<br />NZ_O: New Zealand - Oamaru<br />NZ_OH: New Zealand - Ohinewai<br />NZ_OI: New Zealand - Ohai<br />NZ_OM: New Zealand - Omakau<br />NZ_OT: New Zealand - Otorohonga<br />NZ_P: New Zealand - Palmerston North<br />NZ_PT: New Zealand - Pahiatua<br />NZ_PU: New Zealand - Putaruru<br />NZ_R: New Zealand - Rotorua<br />NZ_RG: New Zealand - Rangiora<br />NZ_RI: New Zealand - Riwaka<br />NZ_S: New Zealand - Ashburton<br />NZ_SA: New Zealand - Saltwater Creek<br />NZ_SH: New Zealand - Shannon<br />NZ_SY: New Zealand - Sydney<br />NZ_T: New Zealand - Timaru<br />NZ_TA: New Zealand - Tapanui<br />NZ_TE: New Zealand - TeAnau<br />NZ_TH: New Zealand - Taihape<br />NZ_TP: New Zealand - Te Puke<br />NZ_U: New Zealand - Taumaruniu<br />NZ_V: New Zealand - Dannevirke<br />NZ_W: New Zealand - Wellington<br />NZ_WH: New Zealand - Whakatu<br />NZ_WI: New Zealand - Whakatu Industrial Park<br />NZ_WR: New Zealand - Wairoa<br />NZ_WT: New Zealand - Winton<br />NZ_WU: New Zealand - Waikuku<br />NZ_X: New Zealand - Wanganui<br />NZ_Y: New Zealand - Whangarei<br />NZ_YP: New Zealand - Waipukurau<br />NZ_Z: New Zealand - Taupo'
    Client:
      type: object
      properties:
        organizationCode:
          type: string
          nullable: true
        centre:
          $ref: '#/components/schemas/Centre'
        organizationID:
          type: string
          nullable: true
      additionalProperties: false
    ColourCombinationDetails:
      required:
        - calibrationFlag
        - certificateIdentity
        - dateIssued
        - laboratory
        - reissueChargeFlag
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        laboratory:
          $ref: '#/components/schemas/Laboratory'
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        colourX:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourXMinimum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourXMaximum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourY:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourYMinimum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourYMaximum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourZ:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourZMimimum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourZMaximum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourYZ:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourYZMinimum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourYZMaximum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        dateIssued:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21
          format: date
        calibrationFlag:
          $ref: '#/components/schemas/CalibrationFlag'
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
      additionalProperties: false
    ColourDetails:
      required:
        - calibrationFlag
        - certificateIdentity
        - colourX
        - colourY
        - colourZ
        - dateIssued
        - laboratory
        - reissueChargeFlag
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
          description: 'The certificate identity consists of a 1 digit prefix, followed by an 8 digit certificate number, followed by a 1 character suffix, followed by a 1 digit check number.It is printed at the top of the certificate.'
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        laboratory:
          $ref: '#/components/schemas/Laboratory'
        regrabSampleWeight:
          type: integer
          format: int32
        colourX:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        colourY:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        colourZ:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        colourYZ:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        coreBulkValue:
          type: string
          nullable: true
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        colourXAsIs:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourYAsIs:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourZAsIs:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        colourYZAsIs:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        calibrationFlag:
          $ref: '#/components/schemas/CalibrationFlag'
        dateIssued:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21
          format: date
      additionalProperties: false
    CombinationDetails:
      required:
        - cleanWeight1
        - combinationFlag
      type: object
      properties:
        cleanWeight1:
          type: integer
          description: Clean weight = Net Weight X Yield
          format: int32
        cleanWeight2:
          type: integer
          description: Clean weight = Net Weight X Yield
          format: int32
          nullable: true
        cleanWeight3:
          type: integer
          description: Clean weight = Net Weight X Yield
          format: int32
          nullable: true
        cleanWeight4:
          type: integer
          description: Clean weight = Net Weight X Yield
          format: int32
          nullable: true
        cleanWeight5:
          type: integer
          description: Clean weight = Net Weight X Yield
          format: int32
          nullable: true
        vmbMinimum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          description: VMB - Minimum value.
          format: double
          nullable: true
        vmbMaximum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          description: VMB - Maximum value.
          format: double
          nullable: true
        factorWoolBase:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          description: Factor for Wool Base.
          format: double
          nullable: true
        factorVMB:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          description: Factor for VMB.
          format: double
          nullable: true
        factorHardHeadsBase:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          description: Factor for Hard Heads Base.
          format: double
          nullable: true
        factorAirflowMean:
          pattern: '/^\d+(\.\d{6})?$/'
          type: number
          description: Factor for Airflow Mean. Factor used in combination calculation.
          format: double
          nullable: true
        combinationFlag:
          $ref: '#/components/schemas/CombinationFlag'
      additionalProperties: false
    CombinationFlag:
      enum:
        - N
        - S
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
        - '9'
        - A
        - B
        - C
        - D
        - E
        - F
      type: string
      description: 'This field indicates the following: If an Australian Securities Exchange combination was requested and the combination satisfies the contract parameters of ASX the appropriate flag will be transmitted.<br />N: Normal Combination<br />S: ASX24 Combination (formerly SFE)<br />4: ASX19.5 54W Combination<br />5: ASX21.0 55W Combination<br />6: ASX22.6 56W Combination<br />7: ASX19.5 54W, ASX21.0 55W and ASX22.6 56W Combination<br />8: ASX19.5 54W and ASX21.0 55W Combination<br />9: ASX21.0 55W and ASX22.6 56W Combination<br />A: ICAP Wool Contract - China Type 54P<br />B: ICAP Wool Contract - China Type 54<br />C: ICAP Wool Contract - China Type 55<br />D: ICAP Wool Contract - China Type 56<br />E: ICAP Wool Contract - China Type 424<br />F: ICAP Wool Contract - China Type Standard'
    ConditioningTestDetails:
      required:
        - certificateIdentity
        - charge
        - gainLossOfInvoiceMass
        - invoiceMassFlag
        - laboratory
        - moistureContent
        - netWeightODOfConsignment
        - officialRegain
        - regain
        - reissueChargeFlag
        - retestFlag
        - yieldType
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        laboratory:
          minLength: 1
          type: string
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        retestFlag:
          $ref: '#/components/schemas/RetestFlag'
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        massOfGlobalSample:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        sumOfODMasses:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        gainLossOfInvoiceMass:
          type: integer
          format: int32
        moistureContent:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        regain:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        netWeightODOfConsignment:
          pattern: '/^\d+(\.\d{6})?$/'
          type: number
          format: double
        yieldType:
          $ref: '#/components/schemas/YieldType'
        officialRegain:
          pattern: '/^\d+(\.\d{6})?$/'
          type: number
          format: double
        invoiceMassFlag:
          $ref: '#/components/schemas/InvoiceMassFlag'
        dateIssued:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          format: date
          nullable: true
      additionalProperties: false
    Contact:
      type: object
      properties:
        description:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        mobileNumber:
          $ref: '#/components/schemas/PhoneNumber'
        email:
          type: string
          format: email
          nullable: true
      additionalProperties: false
    CoreTestDetails:
      required:
        - certificateIdentity
        - hardHeadsBase
        - laboratory
        - reissueChargeFlag
        - retestFlag
        - vmb
        - woolBase
        - yield1
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        laboratory:
          $ref: '#/components/schemas/Laboratory'
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        woolBase:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        airflowMean:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vmb:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        hardHeadsBase:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        yield1:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        yield2:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        yield3:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        yield4:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        yieldType1:
          $ref: '#/components/schemas/YieldType'
        yieldType2:
          $ref: '#/components/schemas/YieldType'
        retestFlag:
          $ref: '#/components/schemas/RetestFlag'
        yield5:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        vm1:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vm2:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vm3:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        darkAndMedullatedFibreRisk:
          $ref: '#/components/schemas/DarkAndMedullatedFibreRisk'
      additionalProperties: false
    CountryCode:
      enum:
        - AU
        - NZ
        - FR
        - ZA
      type: string
      description: 'A code for the country in which the transmission was created. Country Code using ISO 3166-1 standard<br />AU: Australia<br />NZ: New Zealand<br />FR: France<br />ZA: South Africa'
    CustomProblemDetails:
      required:
        - status
        - title
      type: object
      properties:
        type:
          type: string
          description: "A URI reference [RFC3986] that identifies the problem type.\r\nThis specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). \r\nWhen this member is not present, its value is assumed to be \"about:blank\".      \r\ne.g. For 400 Bad Request, the \"type\" value can be \"https://tools.ietf.org/html/rfc9110#section-15.5.1\""
          nullable: true
        title:
          minLength: 1
          type: string
          description: "A short, human-readable summary of the problem type. \r\nIt SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization(e.g., using proactive content negotiation; see[RFC7231], Section 3.4).\r\ne.g. \"One or more validation errors occurred.\""
        status:
          type: integer
          description: 'The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.'
          format: int32
        detail:
          type: string
          description: 'A human-readable explanation specific to this occurrence of the problem. e.g. 400, 403, etc.'
          nullable: true
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
            nullable: true
          description: 'Dictionary of errors in <PropertyName, ErrorDetails[]> format. e.g. errors: { "name": ["Product name is required"], "category": ["Category name cannot be longer than 20 characters."]  }'
          nullable: true
      additionalProperties: false
      description: A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807.
    DarkAndMedullatedFibreRisk:
      enum:
        - E
        - N
        - D
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
      type: string
      description: 'E: Error in Processing<br />N: Not Applicable<br />D: Not Declared<br />1: Risk Level 1 (lowest)<br />2: Risk Level 2<br />3: Risk Level 3<br />4: Risk Level 4<br />5: Risk Level 5<br />6: Risk Level 6'
    DeliveryBasis:
      enum:
        - D
        - L
      type: string
      description: 'D: Delivery Nominated Destination<br />L: Loaded on Transport'
    DichloromethaneTestDetails:
      required:
        - certificateIdentity
        - charge
        - dichloromethaneDryBasis
        - laboratory
        - reissueChargeFlag
        - retestFlag
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        laboratory:
          minLength: 1
          type: string
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        retestFlag:
          $ref: '#/components/schemas/RetestFlag'
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        dichloromethaneDryBasis:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        dateIssued:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          format: date
          nullable: true
      additionalProperties: false
    FibreDiameterHistogram:
      type: object
      properties:
        fibreDiameterHistogramHeader:
          $ref: '#/components/schemas/FibreDiameterHistogramHeader'
        fibreDiameterHistogramDetails:
          type: array
          items:
            $ref: '#/components/schemas/FibreDiameterHistogramDetail'
          nullable: true
      additionalProperties: false
    FibreDiameterHistogramDetail:
      required:
        - fibreMeasurements
      type: object
      properties:
        fibreMeasurements:
          type: array
          items:
            $ref: '#/components/schemas/FibreDiameterHistogramDetailMeasurement'
      additionalProperties: false
    FibreDiameterHistogramDetailMeasurement:
      required:
        - fibreDiameter
        - fibresMeasuredPercentage
      type: object
      properties:
        fibreDiameter:
          type: integer
          description: Fibre Diameter for the measurement.
          format: int32
        fibresMeasuredPercentage:
          pattern: '/^\d+(\.\d{4})?$/'
          type: number
          description: Percentage of fibres measured for the measurement.
          format: double
      additionalProperties: false
    FibreDiameterHistogramHeader:
      required:
        - coefficientOfVariation
        - comfortFactorPercentage
        - dateIssued
        - instrument
        - mean
        - numberOfSpecimens
        - reportingFlag
        - standardDeviation
        - subSamplingMethod
      type: object
      properties:
        coefficientOfVariation:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        comfortFactorPercentage:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          description: Percentage of Fibres 30 Microns and under.
          format: double
        fibresMeasured:
          type: integer
          format: int32
          nullable: true
        reportingFlag:
          $ref: '#/components/schemas/ReportingFlag'
        instrument:
          $ref: '#/components/schemas/Instrument'
        subSamplingMethod:
          $ref: '#/components/schemas/SubSamplingMethod'
        numberOfSpecimens:
          type: integer
          format: int32
        mean:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        standardDeviation:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        curvatureMeanDegPerMm:
          type: integer
          format: int32
          nullable: true
        meanMinimum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        meanMaximum:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        coreTestSamplingDate:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: "For records 31 and 55 this is the date core test was sampled or date combination/OML was requested.\r\nFor the 21A record this is the date the core test was sampled, the last date of weighing for untested wool or the date the Combination/OML was requested.        \r\nDate value in ISO 8601 standard. e.g. 2024-03-21."
          format: date
          nullable: true
        dateIssued:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21.
          format: date
        factorLaserscanNumerator:
          pattern: '/^\d+(\.\d{6})?$/'
          type: number
          format: double
          nullable: true
        factorLaserscanDenominator:
          pattern: '/^\d+(\.\d{6})?$/'
          type: number
          format: double
          nullable: true
      additionalProperties: false
    GetOrganizationDetailsRequest:
      required:
        - abn
        - countryOfOrigin
        - currentReceiver
        - currentTransmitter
        - documentOriginator
        - finalReceiver
      type: object
      properties:
        countryOfOrigin:
          $ref: '#/components/schemas/CountryCode'
        documentOriginator:
          minLength: 1
          type: string
        currentTransmitter:
          minLength: 1
          type: string
        currentReceiver:
          minLength: 1
          type: string
        finalReceiver:
          minLength: 1
          type: string
        softwareIdentifier:
          $ref: '#/components/schemas/SoftwareIdentifier'
        abn:
          minLength: 1
          type: string
        startDateTimeStatusRequest:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        endDateTimeStatusRequest:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        userNetworkDateTime:
          type: boolean
          nullable: true
      additionalProperties: false
    GetTestCertificatesRequest:
      required:
        - abn
        - countryOfOrigin
        - currentReceiver
        - currentTransmitter
        - documentOriginator
        - finalReceiver
      type: object
      properties:
        countryOfOrigin:
          $ref: '#/components/schemas/CountryCode'
        documentOriginator:
          minLength: 1
          type: string
        currentTransmitter:
          minLength: 1
          type: string
        currentReceiver:
          minLength: 1
          type: string
        finalReceiver:
          minLength: 1
          type: string
        softwareIdentifier:
          $ref: '#/components/schemas/SoftwareIdentifier'
        abn:
          minLength: 1
          type: string
      additionalProperties: false
    GuidanceReporttDetails:
      required:
        - certificateIdentity
        - charge
        - laboratory
        - reissueChargeFlag
        - retestFlag
        - yield1
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        laboratory:
          minLength: 1
          type: string
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        woolBase:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        airflowMean:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vmb:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        hardHeadsBase:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        yield1:
          minLength: 1
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
        yield2:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yield3:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yield4:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yieldType1:
          $ref: '#/components/schemas/YieldType'
        yieldType2:
          $ref: '#/components/schemas/YieldType'
        retestFlag:
          $ref: '#/components/schemas/RetestFlag'
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        vM1:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        vM2:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        vM3:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
      additionalProperties: false
    Instrument:
      enum:
        - 1
        - 2
      type: integer
      description: '<br />1: Laserscan<br />2: OFDA'
      format: int32
    InterlotComponentBaleHeader:
      required:
        - areaOfOrigin
        - baleDescription
        - bales
        - brand
      type: object
      properties:
        brand:
          minLength: 1
          type: string
        baleDescription:
          minLength: 1
          type: string
        areaOfOrigin:
          minLength: 1
          type: string
        locationWithinStore:
          type: string
          nullable: true
        bales:
          type: integer
          format: int32
        postcode:
          type: string
          nullable: true
      additionalProperties: false
    InvoiceMassFlag:
      enum:
        - G
        - L
      type: string
      description: 'G: Invoice Mass is a Gain<br />L: Invoice Mass is a Loss'
    Laboratory:
      enum:
        - 1
        - 2
        - 3
        - 4
      type: integer
      description: 'The code for a Test House.<br />1: Australian Wool Testing Authority<br />2: N.Z. Wool Testing Authority<br />3: N.Z. Wool Testing Service<br />4: South African Wool Testing Authority'
      format: int32
    LengthAfterCardingTestDetails:
      required:
        - certificateIdentity
        - charge
        - laboratory
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        laboratory:
          minLength: 1
          type: string
        lacBarbe:
          type: integer
          format: int32
          nullable: true
        lacBarbeCV:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        lacHauteur:
          type: number
          format: double
          nullable: true
        lacHauteurCV:
          type: number
          format: double
          nullable: true
        lacCardWaste:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
      additionalProperties: false
    LengthAndStrengthCombDetails:
      required:
        - certificateIdentity
        - dateIssued
        - isLsSampleSecured
        - laboratory
        - lsCertType
        - positionOfBreakPercentageBase
        - positionOfBreakPercentageMiddle
        - positionOfBreakPercentageTip
        - stapleLength
        - stapleLengthCvPercentage
        - stapleLengthMaximum
        - stapleLengthMinimum
        - stapleStrength
        - stapleStrengthMaximum
        - stapleStrengthMinimum
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        laboratory:
          $ref: '#/components/schemas/Laboratory'
        regrabSampleWeight:
          type: integer
          description: 'The weight of a regrab sample, a grab sample taken after the wool has been initially sampled and tested, is shown on the new certificate'
          format: int32
          nullable: true
        stapleLength:
          type: integer
          description: The mean length of a staple from tip to base. At least 60 staples are measured for each test lot.
          format: int32
        stapleLengthCvPercentage:
          type: integer
          description: Staple length coefficient of variation. This is a measurement of the staple length variability and is reported as a percentage.
          format: int32
        stapleStrength:
          type: integer
          description: "The force required to break a staple of given thickness. \r\nThe average strength is expressed in Newtons per kilotex.Individual staples range in strength from 0 to 100 Newtons per kilotex"
          format: int32
        stapleLengthMinimum:
          type: integer
          description: "The mean length of a staple from tip to base. At least 60 staples are measured for each test lot. \r\nMinimum - the lowest value in a range of staple length values."
          format: int32
        stapleLengthMaximum:
          type: integer
          description: "The mean length of a staple from tip to base. At least 60 staples are measured for each test lot. \r\nMaximum - the highest value in a range of staple length values."
          format: int32
        stapleStrengthMinimum:
          type: integer
          description: "The force required to break a staple of given thickness. \r\nThe average strength is expressed in Newtons per kilotex.Individual staples range in strength from 0 to 100 Newtons per kilotex\r\nMinimum - The lowest value in a range of staple strength values"
          format: int32
        stapleStrengthMaximum:
          type: integer
          description: "The force required to break a staple of given thickness. \r\nThe average strength is expressed in Newtons per kilotex.Individual staples range in strength from 0 to 100 Newtons per kilotex\r\nMaximum - The highest value in a range of staple strength value"
          format: int32
        positionOfBreakPercentageTip:
          type: integer
          description: "The position of break indicates the location of the weakest part of the staple.\r\nTip - Percentage of wool staple with a tip section position of break."
          format: int32
        positionOfBreakPercentageMiddle:
          type: integer
          description: "The position of break indicates the location of the weakest part of the staple. \r\nMiddle - Percentage of wool staples with a middle section position of break."
          format: int32
        positionOfBreakPercentageBase:
          type: integer
          description: "The position of break indicates the location of the weakest part of the staple. \r\nBase - Percentage of wool staples with a base section position of break."
          format: int32
        team3Hauteur:
          type: integer
          description: "Predicted Fibre Length in the Top. NOTE: Any certificate issued (or reissued with a new Certificate ID Number) from 1st July, 2006 will be based on the TEAM-3 calculations. \r\nAnything issued prior to 1st July, 2006 will be based on the TEAM-2 calculations.\r\nA check against the Date Issued field in the 51L or 51K record will determine which TEAM formula has been used."
          format: int32
          nullable: true
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        lsCertType:
          $ref: '#/components/schemas/LsCertType'
        isLsSampleSecured:
          type: boolean
          description: "Specifies whether the L/S sample is secured or not. <br />\r\n`true` for a secured L/S sample <br />\r\n`false` for a unsecured L/S sample <br />"
        expectedBarbe:
          type: integer
          description: "Expected Barbe length in the Top. Used for NZ Crossbred wool certificates based on the 2016 calculation. \r\nAny Length and Strength certificate for NZ Crossbred wool will include a calculated Barbe value based on the 2016 calculation."
          format: int32
          nullable: true
        team3HauteurCvPercentage:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          description: 'Coefficient of Variation of Hauteur. NOTE: Refer to note in `Team3Hauteur`.'
          format: double
          nullable: true
        team3RomainePercentage:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          description: 'Romaine. NOTE: Refer to note in `Team3Hauteur`.'
          format: double
          nullable: true
        dateIssued:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21
          format: date
        stapleStrengthLowest25Percent:
          type: integer
          description: Average Staple Strength of the lowest 25% of staples measured for Strength.
          format: int32
          nullable: true
      additionalProperties: false
    LengthAndStrengthDetails:
      required:
        - certificateIdentity
        - dateIssued
        - isLsSampleSecured
        - laboratory
        - lsCertType
        - positionOfBreakPercentageBase
        - positionOfBreakPercentageMiddle
        - positionOfBreakPercentageTip
        - stapleLength
        - stapleLengthCvPercentage
        - stapleStrength
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        laboratory:
          $ref: '#/components/schemas/Laboratory'
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        stapleLength:
          type: integer
          description: The mean length of a staple from tip to base. At least 60 staples are measured for each test lot.
          format: int32
        stapleLengthCvPercentage:
          type: integer
          description: Staple length coefficient of variation. This is a measurement of the staple length variability and is reported as a percentage.
          format: int32
        stapleStrength:
          type: integer
          description: "The force required to break a staple of given thickness. \r\nThe average strength is expressed in Newtons per kilotex.Individual staples range in strength from 0 to 100 Newtons per kilotex"
          format: int32
        positionOfBreakPercentageTip:
          type: integer
          description: "The position of break indicates the location of the weakest part of the staple.\r\nTip - Percentage of wool staple with a tip section position of break."
          format: int32
        positionOfBreakPercentageMiddle:
          type: integer
          description: "The position of break indicates the location of the weakest part of the staple. \r\nMiddle - Percentage of wool staples with a middle section position of break."
          format: int32
        positionOfBreakPercentageBase:
          type: integer
          description: "The position of break indicates the location of the weakest part of the staple. \r\nBase - Percentage of wool staples with a base section position of break."
          format: int32
        team3Hauteur:
          type: integer
          description: "Predicted Fibre Length in the Top. NOTE: Any certificate issued (or reissued with a new Certificate ID Number) from 1st July, 2006 will be based on the TEAM-3 calculations. \r\nAnything issued prior to 1st July, 2006 will be based on the TEAM-2 calculations.\r\nA check against the Date Issued field in the 51L or 51K record will determine which TEAM formula has been used."
          format: int32
          nullable: true
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        lsCertType:
          $ref: '#/components/schemas/LsCertType'
        isLsSampleSecured:
          type: boolean
          description: "Specifies whether the L/S sample is secured or not. <br />\r\ntrue: for a secured L/S sample <br />\r\nflase: for a unsecured L/S sample <br />"
        expectedBarbe:
          type: integer
          description: "Expected Barbe length in the Top. Used for NZ Crossbred wool certificates based on the 2016 calculation. \r\nAny Length and Strength certificate for NZ Crossbred wool will include a calculated Barbe value based on the 2016 calculation."
          format: int32
          nullable: true
        team3HauteurCvPercentage:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          description: 'Coefficient of Variation of Hauteur. NOTE: Refer to note in `Team3Hauteur`.'
          format: double
          nullable: true
        team3RomainePercentage:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          description: 'Romaine. NOTE: Refer to note in `Team3Hauteur`.'
          format: double
          nullable: true
        dateIssued:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date
        stapleStrengthLowest25Percent:
          type: integer
          description: Average Staple Strength of the lowest 25% of staples measured for Strength.
          format: int32
          nullable: true
      additionalProperties: false
    LotHeader:
      required:
        - bales
        - gross
        - lotIdentity
        - lotType
        - packCondition
        - packMaterial
        - tare
        - updateType
      type: object
      properties:
        lotIdentity:
          minLength: 1
          type: string
        bales:
          type: integer
          format: int32
        gross:
          type: integer
          format: int32
        tare:
          type: integer
          format: int32
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        cataloguePageNumber:
          type: integer
          format: int32
          nullable: true
        isNoLot:
          type: boolean
          description: "A flag used to indicate whether or not the lot is included for sale in the auction.\r\nIt is used in New Zealand only.\r\n`true` = Normal Lot, `false` = No Lot"
          nullable: true
        sourceCode:
          $ref: '#/components/schemas/SourceCode'
        updateType:
          $ref: '#/components/schemas/UpdateType'
        catalogueSymbols:
          $ref: '#/components/schemas/CatalogueSymbol'
        packMaterial:
          $ref: '#/components/schemas/PackMaterial'
        lotType:
          $ref: '#/components/schemas/LotType'
        lightestIndividualBaleWeight:
          type: integer
          description: This is the Reweigh Gross Kg of the lightest bale in the lot.
          format: int32
          nullable: true
        reportingFlag:
          $ref: '#/components/schemas/ReportingFlag'
        firstOfferSeason:
          type: integer
          format: int32
          nullable: true
        firstOfferSaleIdentity:
          type: string
          nullable: true
        firstOfferLotIdentity:
          type: string
          description: "This is a compound name for lot number and lot suffix, where the lot number is 5 number characters and the lot suffix is 1 alphanumeric character.\r\nThe suffix is used when a lot is broken up but the original lot number is retained; for example, if 2 bales of a 10-bale lot got wet and the 8 bales the 2 bales are offered separately, one could have a suffix A and the other a suffix B. \r\nWhere a suffix is not used, the lot number occupies the whole of the Lot Identity field."
          nullable: true
        costPerWeightUnit:
          type: integer
          format: int32
          nullable: true
        cleanWeight:
          type: integer
          format: int32
          nullable: true
        yieldType:
          $ref: '#/components/schemas/YieldType'
        weightUnit:
          $ref: '#/components/schemas/WeightUnit'
        offerType:
          $ref: '#/components/schemas/OfferType'
        clientCrossReference:
          type: string
          nullable: true
        packCondition:
          $ref: '#/components/schemas/PackCondition'
      additionalProperties: false
    LotHeaderAwexData:
      type: object
      properties:
        awexId:
          type: string
          description: AWEX-ID must conform to the current AWEX-ID code standard.
          nullable: true
        appraiserId:
          type: string
          description: Contains the AWEX accredited appraiser ID for this lot.
          nullable: true
        classersRegisteredNumber:
          type: string
          description: The AWEX stencil number of the classer or classing house responsible for the final classification of the wool before sale.
          nullable: true
        awexIdComment:
          type: string
          description: This field provides for additional comments relating to the information contained in the `awexId` field.
          nullable: true
        awexIdAuditCode:
          type: string
          description: Audit code used for verifying if `awexId` was issued by AWEX
          nullable: true
      additionalProperties: false
    LotHeaderExtension:
      required:
        - woolDescription
      type: object
      properties:
        coreTestSamplingDate:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: "Date value in ISO 8601 standard. e.g. 2024-03-21.\r\nFor records 31 and 55 this is the date core test was sampled or date combination/OML was requested. \r\nFor the 21A record this is the date the core test was sampled, the last date of weighing for untested wool or the date the Combination/OML was requested."
          format: date
          nullable: true
        woolDescriptionComment:
          type: string
          description: This field provides for additional comments relating to the information contained in the Wool Description field.
          nullable: true
        woolDescription:
          minLength: 1
          type: string
          description: "This field contains a description that is either an AWEX-ID description or another appraisal description.\r\nAlternative valid appraisal descriptions include AWC type, Exporter type. \r\nThe AWEX-ID description must conform to the current AWEX-ID code standard.\r\nIf sending an AWC type, the first character of this field must be set to `W`, followed by the AWC Type, for all other non AWEX-ID typing descriptions the first character should be set to `P` followed by the type.If sending AWEX-ID the type starts from position one of the field (i.e.there are no leading characters). \r\nThis field is to be always transmitted in upper case."
        gstTaxInvoiceFlag:
          type: boolean
          description: '`true` = GST amount is applicable to invoice. `false` = GST amount is not applicable to invoice.'
          nullable: true
        brokerReservePrice:
          type: integer
          format: int32
          nullable: true
        growerReservePrice:
          type: integer
          format: int32
          nullable: true
        openingPrice:
          type: integer
          format: int32
          nullable: true
        valuationPrice:
          type: integer
          format: int32
          nullable: true
        woolDescriptionAuditCode:
          type: string
          description: Audit code used for verifying if AWEX-ID was issued by AWEX.
          nullable: true
        numberOfOverweightBales:
          type: integer
          description: This is the total number of bales with a Reweigh Gross Kg over 204kg.
          format: int32
          nullable: true
      additionalProperties: false
    LotHeaderPricingData:
      type: object
      properties:
        priceBasis:
          $ref: '#/components/schemas/PriceBasis'
        yieldBasis:
          type: string
          nullable: true
        offers:
          maxItems: 6
          type: array
          items:
            $ref: '#/components/schemas/LotHeaderPricingDataOffer'
          nullable: true
      additionalProperties: false
    LotHeaderPricingDataOffer:
      required:
        - offerDate
        - offerPrice
      type: object
      properties:
        offerPrice:
          type: integer
          format: int32
        offerDate:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21
          format: date
      additionalProperties: false
    LotHeaderVendorDeclaration:
      type: object
      properties:
        qualitySchemes:
          maxItems: 3
          type: array
          items:
            $ref: '#/components/schemas/QualitySchemeDetail'
          nullable: true
        mulesingStatus:
          type: string
          nullable: true
      additionalProperties: false
    LotType:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
      type: integer
      description: 'A code used to describe wool lot preparation. It is not wool type. `*` wool meets clip preparation guidelines.`#` wool does not necessarily meet clip preparation guidelines<br />1: (Suffix - P) Classed Grower Lot *<br />2: (Suffix - M) Objectively Matched Lot<br />3: (Suffix - J) Combined Certificate<br />4: (Suffix - I) Subjectively Matched Interlot<br />5: (Suffix - B) Other Bulk Class Lot #<br />6: Not Used<br />7: (Suffix - N) Objectively Matched Interlot<br />8: (Suffix - Q) Classed Bulk Class Lot – Quality Managed *<br />9: (Suffix - D) Other Grower Lot #'
      format: int32
    LsCertType:
      enum:
        - 0
        - 1
        - 2
      type: integer
      description: '0: Length & Strength tested<br />1: Length only test requested<br />2: Insufficient staples'
      format: int32
    MulesingStatus:
      enum:
        - NM
        - LN
        - CM
        - AA
        - M
        - ND
      type: string
      description: 'NM: Non Mulesed<br />LN: Liquid Nitrogen<br />CM: Ceased Mulesing<br />AA: Mulesed with Analgesic &/or Anaesthetic<br />M: Mulesed<br />ND: Not Declared'
    OMIDetails:
      required:
        - certificateIdentity
        - hardHeadsBase
        - laboratory
        - reissueChargeFlag
        - retestFlag
        - vmb
        - woolBase
        - yield1
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        laboratory:
          $ref: '#/components/schemas/Laboratory'
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        woolBase:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        airflowMean:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vmb:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        hardHeadsBase:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        yield1:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        yield2:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        yield3:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        yield4:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        yieldType1:
          $ref: '#/components/schemas/YieldType'
        yieldType2:
          $ref: '#/components/schemas/YieldType'
        retestFlag:
          $ref: '#/components/schemas/RetestFlag'
        yield5:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        vm1:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vm2:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vm3:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
      additionalProperties: false
    OMLDetails:
      required:
        - certificateIdentity
        - hardHeadsBase
        - laboratory
        - reissueChargeFlag
        - retestFlag
        - vmb
        - woolBase
        - yield1
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        laboratory:
          $ref: '#/components/schemas/Laboratory'
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        woolBase:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        airflowMean:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vmb:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        hardHeadsBase:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        yield1:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        yield2:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        yield3:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        yield4:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        yieldType1:
          $ref: '#/components/schemas/YieldType'
        yieldType2:
          $ref: '#/components/schemas/YieldType'
        retestFlag:
          $ref: '#/components/schemas/RetestFlag'
        yield5:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        vm1:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vm2:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vm3:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
      additionalProperties: false
    OfferType:
      enum:
        - P
        - N
        - R
      type: string
      description: 'P: Previous/Passed-In Price<br />N: Negotiable Price<br />R: Reserve Price'
    OrganizationDetail:
      required:
        - dateLastUpdated
        - industryGroupID
        - nameOfOrganisation
        - organisationCode
        - transmitterFlag
      type: object
      properties:
        id:
          type: string
          nullable: true
        organisationCode:
          minLength: 1
          type: string
        nameOfOrganisation:
          minLength: 1
          type: string
        dateLastUpdated:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21 (year-month-day)
          format: date
        industryGroupID:
          minLength: 1
          type: string
        transmitterFlag:
          minLength: 1
          type: string
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        abn:
          type: string
          nullable: true
        faxNumber:
          $ref: '#/components/schemas/PhoneNumber'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          nullable: true
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
          nullable: true
      additionalProperties: false
    OrganizationDetails:
      required:
        - organizationDetailCollection
        - transmissionHeader
      type: object
      properties:
        transmissionHeader:
          $ref: '#/components/schemas/TransmissionHeader'
        organizationDetailCollection:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationDetail'
      additionalProperties: false
    PackCondition:
      enum:
        - N
        - M
        - R
        - X
      type: string
      description: 'Where a line/lot contains a Pack with a lower condition, the lower condition shall apply. The hierarchy from highest to lowest is N, M, R, X. This field is optional in New Zealand transmissions.<br />N: New Pack (not previously used)<br />M: Marked (not previously cored and grabbed<br />R: Repaired (previously core and/or grabbed and repaired)<br />X: Not repaired (previously cored and/or grabbed) (excl reoffer'
    PackMaterial:
      enum:
        - N
        - E
        - J
        - K
      type: string
      description: 'Where a line/lot contains a Pack with a lower Material, the lower Material shall apply.The hierarchy from highest to lowest is N, E, J, K. Printed catalogue condition: The code for Nylon packs shall not be printed (but shall be transmitted).<br />N: Nylon Packs (complete lots only)<br />E: Experimental Packs<br />J: Jute packs (complete lots or lots that contain portions of Nylon and/or HDPE 5 and/or HDPE 1 and Jute packs)<br />K: HDPE1 packs (complete lots or lots that contain portions of Nylon and/or HDPE 5 and HDPE 1 packs)'
    PackType:
      enum:
        - '0'
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
        - '9'
        - A
        - B
        - C
        - D
        - E
        - F
        - Z
      type: string
      description: 'A code used to indicate how the wool has been baled. The most common type is Farm bales. <strong>Original</strong> - the pack type when the wool was originally baled. <strong>Preferred</strong> - The pack type which the buyer would prefer to be used when his wool is dumped.<br />0: Standard (farm) bale<br />1: Bag/butt<br />2: Lightweight bale<br />3: Jumbo bale<br />4: Single bales (normal density dumped)<br />5: Single bales (high density dumped)<br />6: Single bales (super high density dumped)<br />7: 3 bale tripack (super high density dumped)<br />8: 2 bale tripack (super high density dumped)<br />9: U bales<br />A: 4 or 6 bale unitised (normal density dumped)<br />B: 4 or 6 bale unitised (high density dumped)<br />C: 4 or 6 bale unitised (super high density dumped)<br />D: Two Bale Module (2BM)<br />E: J9 size bale used for scoured wool<br />F: J12 size bale used for scoured wool<br />Z: Mixed (to be used with groups only, that is, record type 12)'
    PhoneNumber:
      type: object
      properties:
        countryCode:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
      additionalProperties: false
    PostSaleCoreTestDetails:
      required:
        - certificateIdentity
        - charge
        - laboratory
        - reissueChargeFlag
        - retestFlag
        - yield1
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        laboratory:
          minLength: 1
          type: string
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        woolBase:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        airflowMean:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vmb:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        hardHeadsBase:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        yield1:
          minLength: 1
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
        yield2:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yield3:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yield4:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yieldType1:
          $ref: '#/components/schemas/YieldType'
        yieldType2:
          $ref: '#/components/schemas/YieldType'
        retestFlag:
          $ref: '#/components/schemas/RetestFlag'
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        vM1:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        vM2:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        vM3:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
      additionalProperties: false
    PremiumTestDetails:
      required:
        - certificateIdentity
        - laboratory
        - reissueChargeFlag
        - retestFlag
        - yield1
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        laboratory:
          $ref: '#/components/schemas/Laboratory'
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        woolBase:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        airflowMean:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vmb:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        hardHeadsBase:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        yield1:
          minLength: 1
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
        yield2:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yield3:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yield4:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yieldType1:
          $ref: '#/components/schemas/YieldType'
        yieldType2:
          $ref: '#/components/schemas/YieldType'
        retestFlag:
          $ref: '#/components/schemas/RetestFlag'
        yield5:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        vm1:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        vm2:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        vm3:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        darkAndMedullatedFibreRisk:
          $ref: '#/components/schemas/DarkAndMedullatedFibreRisk'
      additionalProperties: false
    PriceBasis:
      enum:
        - G
        - C
        - I
        - F
      type: string
      description: 'G: Greasy<br />C: CLCOF (ACOF or NZCOF)<br />I: CIF<br />F: FOB'
    QualityScheme:
      enum:
        - ASWG
        - AUTH
        - BETC
        - BIOC
        - DAL3
        - EUEC
        - MTEC
        - ACO
        - DBAA
        - USA
        - NASA
        - SXC
        - RWS
        - SBFC
        - SW
        - SWAU
        - TQMS
        - FAP
        - PWIA
        - FERN
      type: string
      description: 'The registered four character or less quality scheme code. To obtain the current code list please go to this URL: http://www.awex.com.au/standards/catalogue/<br />ASWG: Australian Superfine Woolgrower Association (Member)<br />AUTH: Authentico<br />BETC: Better Choices (Pain Mitigation)<br />BIOC: BioClip (Biologically Harvested)<br />DAL3: Dalcare-3<br />EUEC: EU Eco label (meets EU Eco standards)<br />MTEC: Merino Tech WA<br />ACO: Organic - Australian Certified Organic<br />DBAA: Organic - Demeter Biodynamic Agriculture Aust.<br />USA: Organic - Meets USA Certification requirements<br />NASA: Organic - National Association for Sustainable Agriculture Aust.<br />SXC: Organic - Southern Cross Certified<br />RWS: Responsible Wool Standard<br />SBFC: Schute Bell Fibre Care<br />SW: SustainaWOOL<br />SWAU: SustainaWOOL Gold<br />TQMS: Traprock QMS/TIMS<br />FAP: Farm Assurance Program<br />PWIA: PGG Wrightson Integrity Assured<br />FERN: Woolcare Fernmark'
    QualitySchemeDetail:
      type: object
      properties:
        qualityScheme:
          $ref: '#/components/schemas/QualityScheme'
        qualitySchemeRegistrationId:
          type: string
          description: Registered Identification issued by the relevant Accreditation or Membership organisation.
          nullable: true
        qualitySchemeOtherDetail:
          type: string
          description: Used to transmit (other) information relevant to the Scheme that is required by the buyer(e.g.Month/Year shorn).
          nullable: true
      additionalProperties: false
    RecordTypesToBeExcludedForAuctionCatalogue:
      enum:
        - '21'
        - 51C
        - 79B
        - '84'
        - '31'
        - 32A
      type: string
      description: '<br />21: Lot Header<br />51C: Colour Details<br />79B: Interlot component bale header<br />84: Bale Identification<br />31: Fibre Diameter Histogram Header<br />32A: Fibre Diameter Histogram Details'
    ReissueChargeFlag:
      enum:
        - 0
        - 1
        - 2
        - 3
      type: integer
      description: '0: Original certificate charge<br />1: Re-issued no charge<br />2: Re-issued with additional Charge<br />3: Re-issued with replacement charge (credit issued against original certificate)'
      format: int32
    ReportingFlag:
      enum:
        - R
        - C
        - U
      type: string
      description: 'R: Report, results for this test are supplied for information only<br />C: Certificate results for this test are certified<br />U: This lot is untested and there are no certificate results'
    RequestForData:
      required:
        - requestType
        - transmissionTypeRequested
      type: object
      properties:
        transmissionTypeRequested:
          $ref: '#/components/schemas/TransmissionType'
        saleIdentity:
          $ref: '#/components/schemas/SaleIdentity'
        organisationRequested:
          type: string
          nullable: true
        saleDateRequested:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21
          format: date
          nullable: true
        startDateTimeStatusRequest:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        endDateTimeStatusRequest:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        userNetworkDateTime:
          type: boolean
          nullable: true
        requestType:
          $ref: '#/components/schemas/RequestType'
        woolTypeGroup:
          $ref: '#/components/schemas/WoolTypeGroup'
        recordTypesToBeExcluded:
          type: array
          items:
            type: string
          description: 'Record types and record sub-types to be excluded. e.g. 20 - Lot Header, 22A - Group Header'
          nullable: true
        season:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    RequestForDataForAuctionCatalogue:
      required:
        - requestType
        - transmissionTypeRequested
      type: object
      properties:
        transmissionTypeRequested:
          $ref: '#/components/schemas/TransmissionTypeForAuctionCatalogue'
        saleIdentity:
          $ref: '#/components/schemas/SaleIdentity'
        organisationRequested:
          type: string
          nullable: true
        saleDateRequested:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21
          format: date
          nullable: true
        startDateTimeStatusRequest:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        endDateTimeStatusRequest:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        userNetworkDateTime:
          type: boolean
          nullable: true
        requestType:
          $ref: '#/components/schemas/RequestTypeForData'
        woolTypeGroup:
          $ref: '#/components/schemas/WoolTypeGroup'
        recordTypesToBeExcluded:
          type: array
          items:
            $ref: '#/components/schemas/RecordTypesToBeExcludedForAuctionCatalogue'
          description: 'Record types and record sub-types to be excluded. e.g. 20 - Lot Header, 22A - Group Header.'
          nullable: true
        season:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    RequestForDataGroup:
      required:
        - requestForDataCollection
        - transmissionHeader
      type: object
      properties:
        transmissionHeader:
          $ref: '#/components/schemas/TransmissionHeader'
        requestForDataCollection:
          maxItems: 53
          type: array
          items:
            $ref: '#/components/schemas/RequestForData'
      additionalProperties: false
    RequestForDataOrStatus:
      required:
        - requests
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/RequestForDataGroup'
      additionalProperties: false
    RequestForStatus:
      required:
        - transmissionHeader
      type: object
      properties:
        transmissionHeader:
          $ref: '#/components/schemas/TransmissionHeader'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/RequestForStatusFilter'
          nullable: true
      additionalProperties: false
    RequestForStatusFilter:
      required:
        - transmissionTypeRequested
      type: object
      properties:
        transmissionTypeRequested:
          $ref: '#/components/schemas/TransmissionType'
        saleIdentity:
          $ref: '#/components/schemas/SaleIdentity'
        organisationRequested:
          type: string
          nullable: true
        saleDateRequested:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21
          format: date
          nullable: true
        startDateTimeStatusRequest:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        endDateTimeStatusRequest:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        userNetworkDateTime:
          type: boolean
          nullable: true
        woolTypeGroup:
          $ref: '#/components/schemas/WoolTypeGroup'
        recordTypesToBeExcluded:
          type: array
          items:
            $ref: '#/components/schemas/RecordTypesToBeExcludedForAuctionCatalogue'
          description: 'Record types and record sub-types to be excluded. e.g. 20 - Lot Header, 22A - Group Header'
          nullable: true
        season:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    RequestType:
      enum:
        - 1
        - 2
        - 3
        - 4
      type: integer
      description: '1: Private Data Request<br />2: Status Request<br />3: Data Re-Request<br />4: Broadcast Data Request'
      format: int32
    RequestTypeForData:
      enum:
        - 1
        - 3
        - 4
      type: integer
      description: '1: Private Data Request<br />3: Data Re-Request<br />4: Broadcast Data Request'
      format: int32
    RetestFlag:
      enum:
        - 0
        - 1
        - 2
      type: integer
      description: '0: Normal Test<br />1: Retest<br />2: Check Test'
      format: int32
    SaleIdentity:
      type: object
      properties:
        sellingCentreType:
          type: string
          nullable: true
        saleNumber:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    SaleType:
      enum:
        - A
        - T
        - O
        - AV
        - E
      type: string
      description: 'A: Auction (open cry)<br />T: Tender<br />O: Offer<br />AV: Availability<br />E: Electronic Sale'
    ScouredTestDetails:
      required:
        - alcoholExtractableMatterDryBasis
        - ashContentDryBasis
        - certificateIdentity
        - charge
        - laboratory
        - reissueChargeFlag
        - retestFlag
        - yield1
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        laboratory:
          minLength: 1
          type: string
        regrabSampleWeight:
          type: integer
          format: int32
          nullable: true
        woolBase:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        airflowMean:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vmb:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        hardHeadsBase:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        yield1:
          minLength: 1
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
        yield2:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yield3:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yield4:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yieldType1:
          $ref: '#/components/schemas/YieldType'
        yieldType2:
          $ref: '#/components/schemas/YieldType'
        retestFlag:
          $ref: '#/components/schemas/RetestFlag'
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        vM1:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        vM2:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        vM3:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        ashContentDryBasis:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        alcoholExtractableMatterDryBasis:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
      additionalProperties: false
    ScouredType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      description: '0: Not Scoured<br />1: Scoured – Aqueous<br />2: Scoured – Dual Solvent<br />3: Carbonised<br />4: Mohair<br />5: Noils<br />6: Slipe'
      format: int32
    SoftwareIdentifier:
      type: object
      properties:
        softwareCompany:
          type: string
          nullable: true
        version:
          type: integer
          description: Version no. e.g. 2400
          format: int32
          nullable: true
        programName:
          type: string
          nullable: true
      additionalProperties: false
    SourceCode:
      enum:
        - 1
        - 2
        - 3
      type: integer
      description: 'Source of the lot presented for sale.<br />1: Grower<br />2: Dealer<br />3: BulkClass'
      format: int32
    StatusReply:
      type: object
      properties:
        transmissionHeader:
          $ref: '#/components/schemas/TransmissionHeader'
        responses:
          type: array
          items:
            $ref: '#/components/schemas/TransmissionResponse'
          nullable: true
      additionalProperties: false
    StatusReplyApiResult:
      required:
        - isSuccessful
      type: object
      properties:
        isSuccessful:
          type: boolean
          description: Indicator if the request has been successfully processed.
        message:
          type: string
          description: Contains information about the response if applicable.
          nullable: true
        data:
          $ref: '#/components/schemas/StatusReply'
      additionalProperties: false
      description: A standard API response object used for all successful API responses
    SubSamplingMethod:
      enum:
        - 1
      type: integer
      description: '1: Minicore'
      format: int32
    SubjectiveInterlotDetails:
      required:
        - certificateIdentity
        - laboratory
        - reissueChargeFlag
        - retestFlag
        - vmb
        - woolBase
        - yield1
      type: object
      properties:
        certificateIdentity:
          minLength: 1
          type: string
        charge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
          nullable: true
        laboratory:
          $ref: '#/components/schemas/Laboratory'
        regrabSampleWeight:
          type: integer
          description: 'The weight of a regrab sample, a grab sample taken after the wool has been initially sampled and tested, is shown on the new certificate.'
          format: int32
          nullable: true
        woolBase:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          description: "The oven-dry mass of wool fibre free from all impurities, expressed as a percentage of the mass of the sample. \r\nMin - The lowest value in a range of Wool Base values. \r\nMax - The highest value in a range of Wool Base values."
          format: double
        airflowMean:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
          nullable: true
        vmb:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        hardHeadsBase:
          pattern: '/^\d+(\.\d{1})?$/'
          type: number
          format: double
        yield1:
          minLength: 1
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
        yield2:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yield3:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yield4:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        yieldType1:
          $ref: '#/components/schemas/YieldType'
        yieldType2:
          $ref: '#/components/schemas/YieldType'
        retestFlag:
          $ref: '#/components/schemas/RetestFlag'
        yield5:
          pattern: '/^\d+(\.\d{2})?$/'
          type: string
          nullable: true
        reissueChargeFlag:
          $ref: '#/components/schemas/ReissueChargeFlag'
        vm1:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        vm2:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        vm3:
          pattern: '/^\d+(\.\d{1})?$/'
          type: string
          nullable: true
        darkAndMedullatedFibreRisk:
          type: string
          nullable: true
      additionalProperties: false
    TestCertificate:
      type: object
      properties:
        testDataHeader:
          $ref: '#/components/schemas/TestDataHeader'
        colorDetails:
          $ref: '#/components/schemas/ColourDetails'
        premiumTestDetails:
          $ref: '#/components/schemas/PremiumTestDetails'
        subjectiveInterlotDetails:
          $ref: '#/components/schemas/SubjectiveInterlotDetails'
        combinationDetails:
          $ref: '#/components/schemas/CombinationDetails'
        lengthAndStrengthCombDetails:
          $ref: '#/components/schemas/LengthAndStrengthCombDetails'
        lengthAndStrengthDetails:
          $ref: '#/components/schemas/LengthAndStrengthDetails'
        omlDetails:
          $ref: '#/components/schemas/OMLDetails'
        coreTestDetails:
          $ref: '#/components/schemas/CoreTestDetails'
        colorCombinationDetails:
          $ref: '#/components/schemas/ColourCombinationDetails'
        omiDetials:
          $ref: '#/components/schemas/OMIDetails'
        postSaleCoreTestDetails:
          $ref: '#/components/schemas/PostSaleCoreTestDetails'
        guidanceReporttDetails:
          $ref: '#/components/schemas/GuidanceReporttDetails'
        scouredTestDetails:
          $ref: '#/components/schemas/ScouredTestDetails'
        dichloromethaneTestDetails:
          $ref: '#/components/schemas/DichloromethaneTestDetails'
        conditioningTestDetails:
          $ref: '#/components/schemas/ConditioningTestDetails'
        lengthAfterCardingTestDetails:
          $ref: '#/components/schemas/LengthAfterCardingTestDetails'
        lengthAdjustmentNoteDetails:
          $ref: '#/components/schemas/AdjustmentNoteDetails'
        sublotCertificateNumbers:
          type: array
          items:
            type: string
          description: A collection of Certificate Identities
          nullable: true
        fibreDiameterHistograms:
          type: array
          items:
            $ref: '#/components/schemas/FibreDiameterHistogram'
          nullable: true
        bales:
          type: array
          items:
            $ref: '#/components/schemas/Bale'
          nullable: true
      additionalProperties: false
    TestCertificates:
      required:
        - testCertificateCollection
        - transmissionHeader
      type: object
      properties:
        transmissionHeader:
          $ref: '#/components/schemas/TransmissionHeader'
        testCertificateCollection:
          type: array
          items:
            $ref: '#/components/schemas/TestCertificate'
      additionalProperties: false
    TestDataHeader:
      required:
        - bales
        - client
        - gross
        - isCompanyABNApplicable
        - isGSTApplicable
        - reportingFlag
        - tare
        - weightUnit
      type: object
      properties:
        client:
          $ref: '#/components/schemas/Client'
        season:
          type: integer
          format: int32
          nullable: true
        saleIdentity:
          $ref: '#/components/schemas/SaleIdentity'
        centreStorage:
          $ref: '#/components/schemas/Centre'
        lotIdentity:
          type: string
          nullable: true
        groupNumber:
          type: string
          nullable: true
        weightNote:
          type: string
          nullable: true
        clientsCrossReference:
          type: string
          nullable: true
        bales:
          type: integer
          format: int32
        gross:
          type: integer
          format: int32
        tare:
          type: integer
          format: int32
        regrabSampleWeight:
          type: integer
          format: int32
        weightUnit:
          $ref: '#/components/schemas/WeightUnit'
        mulesingStatus:
          $ref: '#/components/schemas/MulesingStatus'
        declaredGross:
          type: integer
          format: int32
          nullable: true
        declaredTare:
          type: integer
          format: int32
          nullable: true
        lotType:
          $ref: '#/components/schemas/LotType'
        centreAuction:
          $ref: '#/components/schemas/Centre'
        sourceCode:
          $ref: '#/components/schemas/SourceCode'
        reportingFlag:
          $ref: '#/components/schemas/ReportingFlag'
        scouredType:
          $ref: '#/components/schemas/ScouredType'
        gstAmount:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          description: A GST Amount with 2 digits after the decimal point
          format: double
          nullable: true
        isGSTApplicable:
          type: boolean
          description: A Flag to determine if GST apply to invoice
        isCompanyABNApplicable:
          type: boolean
          description: A Flag to determine if Compnay ABN apply to invoice
      additionalProperties: false
    TransmissionHeader:
      required:
        - abn
        - countryOfOrigin
        - currentReceiver
        - currentTransmitter
        - dateFormatLastRevised
        - dateTransmissionFileCreated
        - documentOriginator
        - finalReceiver
      type: object
      properties:
        dateFormatLastRevised:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21 (year-month-day)
          format: date
        dateTransmissionFileCreated:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21 (year-month-day)
          format: date
        countryOfOrigin:
          $ref: '#/components/schemas/CountryCode'
        documentOriginator:
          minLength: 1
          type: string
        currentTransmitter:
          minLength: 1
          type: string
        currentReceiver:
          minLength: 1
          type: string
        finalReceiver:
          minLength: 1
          type: string
        accessPassword:
          type: string
          nullable: true
        accessPasswordReplacement:
          type: string
          nullable: true
        transmissionType:
          $ref: '#/components/schemas/TransmissionType'
        versionNumber:
          type: integer
          format: int32
          nullable: true
        softwareIdentifier:
          $ref: '#/components/schemas/SoftwareIdentifier'
        abn:
          minLength: 1
          type: string
      additionalProperties: false
    TransmissionResponse:
      required:
        - text
      type: object
      properties:
        recordNumber:
          type: integer
          format: int32
          nullable: true
        errorCode:
          type: string
          nullable: true
        text:
          minLength: 1
          type: string
      additionalProperties: false
    TransmissionType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 11
        - 13
        - 16
        - 17
        - 50
        - 52
        - 55
        - 56
        - 60
        - 64
        - 98
        - 99
      type: integer
      description: 'The code used to indicate what type of documents is being transmitted, eg. Brokers’ catalogues or lot invoices.<br />0: Lot Invoices<br />1: Delivery Orders<br />2: Auction Catalogues<br />3: Private Catalogues<br />4: Group Invoices<br />5: Auction Catalogue Updates<br />6: Request Post-Sale Printing of Pre-Sale Certificates<br />7: Statements<br />8: Test Certificate Requests<br />11: Organisation Details<br />13: Lot Price and Buyer<br />16: Delivery Order Summary<br />17: Payment Advice<br />50: Test Certificate<br />52: Test Status<br />55: Test Request Verification<br />56: Dark and Medullated Fibre Risk Verification<br />60: Test Certificate Update<br />64: Payment Confirmation File<br />98: Text File<br />99: Password Replacement'
      format: int32
    TransmissionTypeForAuctionCatalogue:
      enum:
        - 2
        - 3
        - 5
      type: integer
      description: '<br />2: Auction Catalogues<br />3: Private Catalogues<br />5: Auction Catalogue Updates'
      format: int32
    UpdateType:
      enum:
        - A
        - C
        - D
      type: string
      description: 'A flag to indicate what type of change has been made to an item.<br />A: The entry is to be added<br />C: The entry is to be changed<br />D: The entry is to be deleted'
    WeightUnit:
      enum:
        - 0
        - 1
      type: integer
      description: '0: Kilograms<br />1: Pounds'
      format: int32
    WoolSaleHeaderExtension:
      required:
        - dateStorageChargeCommences
        - discountRate
        - maximumDaysDiscount
        - penaltyInterestRate
        - storageChargePerBalePerDay
        - storageOrganisation
      type: object
      properties:
        storageOrganisation:
          minLength: 1
          type: string
          description: "This is the organisation store that is storing the wool. \r\nNote: If there is more than one organisation in a centre, then separate AWEX codes are required for each store.\r\nIt is not necessarily the same as the Releasing Organisation."
        storageDescription:
          type: string
          description: 'Used to provide more details on location within the Storage Organisations facility - such as street address, warehouse number etc. – to assist delivery.'
          nullable: true
        paymentDueDate:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: "The date on which payment is due. Also known as Prompt Date.\r\nDate value in ISO 8601 standard. e.g. 2024-03-21"
          format: date
          nullable: true
        discountRate:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        maximumDaysDiscount:
          maximum: 99
          minimum: 0
          type: integer
          format: int32
        dateStorageChargeCommences:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: Date value in ISO 8601 standard. e.g. 2024-03-21
          format: date
        storageChargePerBalePerDay:
          pattern: '/^\d+(\.\d{3})?$/'
          type: number
          format: double
        penaltyInterestRate:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          format: double
        lotAvailableDate:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          description: "The first date on which the wool is available for purchase.\r\nDate value in ISO 8601 standard. e.g. 2024-03-21."
          format: date
          nullable: true
        postSaleChargeRebate:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          description: "The total (extended) amount of Post Sale Charge Rebate for the Lot. \r\nThis value is provided where a value in the Post Sale Charge Rebate field exists (11A)"
          format: double
          nullable: true
      additionalProperties: false
    WoolSaleHeaderLots:
      required:
        - calculationBasis
        - catalogueSection
        - centreCatalogue
        - centreStorage
        - currency
        - deliveryBasis
        - invoicingOrganisation
        - isFinalCatalogue
        - packType
        - postSaleCharge
        - releasingOrganisation
        - saleDate
        - saleIdentity
        - season
        - sellingOrganisation
        - weightUnit
        - woolState
        - woolTypeGroup
      type: object
      properties:
        season:
          type: integer
          format: int32
        saleIdentity:
          $ref: '#/components/schemas/SaleIdentity'
        centreStorage:
          minLength: 1
          type: string
          description: "The centre (code) representing the location at which the wool is stored (relevant to the intended use of the document). \r\nFor example, the Centre- Storage against a lot in the AC or ACU is the location of the wool where the buyer would expect to take delivery."
        saleDate:
          minLength: 1
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/'
          type: string
          format: date
        woolState:
          $ref: '#/components/schemas/WoolState'
        packType:
          $ref: '#/components/schemas/PackType'
        currency:
          maxLength: 3
          minLength: 1
          type: string
          description: The Code for the currency in which the sale was made. To obtain the current code list please use the Commonwealth Bank Currency Codes on their website
        weightUnit:
          $ref: '#/components/schemas/WeightUnit'
        postSaleCharge:
          pattern: '/^\d+(\.\d{2})?$/'
          type: number
          description: "This is the published rate for the charge levied by the broker to the buyer for each bale purchased and is included in the last cost of the wool.\r\nIt will not include freight if freight is listed separately in the Freight Charge field, if freight is not listed in the Freight Charge field it will include freight. \r\nIn Australia it will always include freight as the Freight Charge field is not used."
          format: double
        calculationBasis:
          $ref: '#/components/schemas/CalculationBasis'
        freightCharge:
          type: number
          description: "If specified, this is not part of the last cost of the wool. \r\nIf a freight charge is not included in the post Sale Charge, then the freight charge is the charge levied by the broker should the buyer request that the broker transport the wool to the nearest designated area (usually a shipping port). \r\nFreight Charge is not used in Australia."
          format: double
          nullable: true
        freightRebate:
          type: number
          format: double
          nullable: true
        chargePerLot:
          type: number
          description: Any charge made for a lot which is not covered by the Post Sale Charge or the Freight charge per Bale fields.
          format: double
          nullable: true
        invoiceNumber:
          type: string
          nullable: true
        catalogueSection:
          $ref: '#/components/schemas/CatalogueSection'
        invoicingOrganisation:
          minLength: 1
          type: string
          description: The code for the broker who will raise the invoice for the wool
        isFinalCatalogue:
          type: boolean
          description: "Indicates whether the related section of the catalogue transmission is expected to have more amendments transmitted or is the final transmission for that section. \r\n`true` = Final Catalogue. `false` = Not Final Catalogue"
        releasingOrganisation:
          minLength: 1
          type: string
          description: The broker that is responsible for releasing the wool out of the store
        sellingOrganisation:
          minLength: 1
          type: string
        woolTypeGroup:
          $ref: '#/components/schemas/WoolTypeGroup'
        centreCatalogue:
          $ref: '#/components/schemas/Centre'
        deliveryBasis:
          $ref: '#/components/schemas/DeliveryBasis'
        centreDelivery:
          $ref: '#/components/schemas/Centre'
        alternateDelivery:
          $ref: '#/components/schemas/Centre'
      additionalProperties: false
    WoolSaleHeaderNonAuction:
      type: object
      properties:
        catalogueAvailabilityDateTime:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        saleStartDateTime:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        saleEndDateTime:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
        saleType:
          $ref: '#/components/schemas/SaleType'
        electronicSaleFlag:
          type: boolean
          nullable: true
        reservePriceDisplayFlag:
          type: boolean
          description: '`true` = Available to Buyers, `false` = Not available to buyers.'
          nullable: true
        tenderSaleReplyDateTime:
          pattern: '/(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])[+-]?(((([0][0-9])|([1][0-3])):(([03][0])|([14][5])))|14:00)$/'
          type: string
          description: Date and Time with offset value in ISO 8601 standard. e.g. 2024-03-21T19:25:04+00:00
          format: date-time
          nullable: true
      additionalProperties: false
    WoolState:
      enum:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
        - '9'
        - A
        - C
        - M
      type: string
      description: 'The state of the wool itemised in the invoice.<br />1: Greasy<br />2: Dead<br />3: Slipe<br />4: Scoured<br />5: Carbonised<br />6: Wool tops<br />7: Wool noils<br />8: Carded sliver<br />9: Other processed wool<br />A: Alpaca<br />C: Cashmere<br />M: Mohair'
    WoolTypeGroup:
      enum:
        - MFLC
        - MSKT
        - XBFS
        - ODDS
      type: string
      description: 'A code to indicate which section of the sale that lot belongs.<br />MFLC: Merino fleece types<br />MSKT: Merino fleece types<br />XBFS: Merino fleece types<br />ODDS: Merino fleece types'
    YieldType:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 16
        - 17
        - 18
        - 19
        - 20
        - 21
        - 22
        - 23
        - 24
        - 25
        - 26
        - 27
        - 28
        - 29
        - 30
        - 31
        - 32
        - 33
        - 42
        - 43
      type: integer
      description: 'Yield Type indicates either the type of yield transmitted in another field or record, or the type of yield used to arrive at the value in another field.<br />1: RESERVED<br />2: RESERVED<br />3: ESTIMATED<br />4: Schlumberger Combed Dry (1% TFM)<br />5: Schlumberger Combed Dry (2% TFM)<br />7: Noble Combed in Oil<br />8: IWTO Scoured Yield at 16% Regain<br />9: IWTO Scoured Yield at 17% Regain<br />10: Japanese Clean Scoured<br />11: Australian Carbonising<br />12: IWTO Clean Wool Content, 17% Regain<br />13: United States Custom Clean<br />14: Card Sliver<br />15: ASTM Clean Wool Fibre Present<br />16: Noble Dry Combed<br />17: Schlumberger Combed in Oil (4.6% TFM)<br />18: Noble Combed Dry<br />19: Theoretical Card Sliver<br />20: ASTM Laboratory Scoured Yield<br />21: Conditioned at 12.00%<br />22: Conditioned at 13.00%<br />23: Conditioned at 13.50%<br />24: Conditioned at 13.64%<br />25: Conditioned at 14.00%<br />26: Conditioned at 14.40%<br />27: Conditioned at 15.00%<br />28: Conditioned at 16.00%<br />29: Conditioned at 17.00%<br />30: Conditioned at 18.00%<br />31: Conditioned at 18.25%<br />32: Japanese Clean Scoured at 17%<br />33: New Zealand Process Yield<br />42: IWT0 Schlumberger Oil T&N (2.0% & T.FM.)<br />43: IWTO Clean Wool Content, 16% Regain'
      format: int32
  securitySchemes:
    Bearer:
      type: apiKey
      description: 'JWT Access Token that is added in the Authorization header of the HTTP request. Example: "Authorization: Bearer {token}". The JWT serves as a credential that proves the identity of the client to the server.'
      name: Authorization
      in: header
    oauth2:
      type: oauth2
      description: Authentication for client applications by providing Client ID and Client Secret for an JWT Access Token.
      flows:
        clientCredentials:
          tokenUrl: /auth-server/oauth/token
          scopes: { }
security:
  - Bearer: [ ]
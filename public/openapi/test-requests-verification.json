{
  "openapi": "3.0.1",
  "info": {
    "title": "WIEDPUG API",
    "description": "API Documentation for the WIEDPUG Network",
    "termsOfService": "https://wiedpug.github.io/wiedpug",
    "contact": {
      "name": "WIEDPUG Team",
      "url": "https://wiedpug.github.io/wiedpug",
      "email": "changethis@email.com"
    },
    "license": {
      "name": "Applicable License",
      "url": "https://wiedpug.github.io/wiedpug"
    },
    "version": "v0.0"
  },
  "paths": {
    "/v0/test-requests-verification": {
      "post": {
        "tags": [
          "Test Requests Verification"
        ],
        "summary": "Test Request Verification",
        "description": "Sent by an organisation that has already requested a test by paper to the Test House, as a verification of the paper request",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRequestsVerification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/v0/test-requests-verification/data": {
      "post": {
        "tags": [
          "Test Requests Verification"
        ],
        "summary": "Retrieves the test requests verification",
        "operationId": "RequestForTestRequestsVerification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRequestsVerificationApiResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TestRequestsVerification": {
        "required": [
          "transmissionHeader"
        ],
        "type": "object",
        "properties": {
          "transmissionHeader": {
            "$ref": "#/components/schemas/TransmissionHeader"
          },
          "transferConfig": {
            "$ref": "#/components/schemas/TransferConfig"
          },
          "testRequestsVerificationDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestRequestsVerificationDetail"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransmissionHeader": {
        "required": [
          "abn",
          "countryOfOrigin",
          "currentReceiver",
          "dateFormatLastRevised",
          "dateTransmissionFileCreated",
          "documentOriginator"
        ],
        "type": "object",
        "properties": {
          "dateFormatLastRevised": {
            "maxLength": 10,
            "minLength": 1,
            "pattern": "/(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/",
            "type": "string",
            "description": "Date value in ISO standard UTC date format. e.g. 2024-03-21 (YYYY-MM-DD).",
            "format": "date"
          },
          "dateTransmissionFileCreated": {
            "maxLength": 10,
            "minLength": 1,
            "pattern": "/(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/",
            "type": "string",
            "description": "Date value in ISO standard UTC date format. e.g. 2024-03-21 (YYYY-MM-DD).",
            "format": "date"
          },
          "countryOfOrigin": {
            "$ref": "#/components/schemas/CountryCode"
          },
          "documentOriginator": {
            "$ref": "#/components/schemas/Organisation"
          },
          "currentReceiver": {
            "$ref": "#/components/schemas/Organisation"
          },
          "versionNumber": {
            "pattern": "-?\\d{1,2}",
            "type": "integer",
            "description": "Two digits. e.g. 99",
            "format": "int32",
            "nullable": true
          },
          "softwareIdentifier": {
            "$ref": "#/components/schemas/SoftwareIdentifier"
          },
          "abn": {
            "maxLength": 11,
            "minLength": 1,
            "pattern": "^[0-9]+$",
            "type": "string",
            "description": "Australian Business Number, 11 digits string"
          }
        },
        "additionalProperties": false
      },
      "CountryCode": {
        "enum": [
          "AU",
          "NZ",
          "DE",
          "IT",
          "CN",
          "TW"
        ],
        "type": "string",
        "description": "A code for the country in which the transmission was created. Country Code using ISO 3166-1 standard<br />AU: Australia<br />NZ: New Zealand<br />DE: Germany<br />IT: Italy<br />CN: China<br />TW: Taiwan"
      },
      "Organisation": {
        "required": [
          "organisationCode"
        ],
        "type": "object",
        "properties": {
          "organisationCode": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string"
          },
          "centre": {
            "$ref": "#/components/schemas/Centre"
          }
        },
        "additionalProperties": false
      },
      "Centre": {
        "required": [
          "centreCode",
          "country"
        ],
        "type": "object",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/CountryCode"
          },
          "centreCode": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CentreCodeAustralia"
              },
              {
                "$ref": "#/components/schemas/CentreCodeChina"
              },
              {
                "$ref": "#/components/schemas/CentreCodeGermany"
              },
              {
                "$ref": "#/components/schemas/CentreCodeItaly"
              },
              {
                "$ref": "#/components/schemas/CentreCodeNewZealand"
              },
              {
                "$ref": "#/components/schemas/CentreCodeTaiwan"
              }
            ]
          }
        },
        "additionalProperties": false,
        "description": "Centre has country and centreCode.\r\n\r\nThe centreCode is one of these below based on the value of country.\r\n\r\nThe mapping of country:centreCode is the following:\r\n            \r\nAU:CentreCodeAustralia\r\n\r\nNZ: CentreNewZealand\r\n\r\nDE: CentreGermany\r\n\r\nIT: CentreItaly\r\n\r\nCN: CentreChina\r\n\r\nTW: CentreTaiwan\r\n\r\nThe legacy codes for Overseas Centre are under CentreCodeAustralia"
      },
      "CentreCodeAustralia": {
        "enum": [
          "A",
          "AD",
          "AR",
          "AU",
          "B",
          "BA",
          "BK",
          "BL",
          "BM",
          "BO",
          "BR",
          "BT",
          "C",
          "CA",
          "CB",
          "CC",
          "CL",
          "CN",
          "CO",
          "CR",
          "CU",
          "CW",
          "D",
          "DE",
          "DO",
          "DR",
          "E",
          "ER",
          "ES",
          "F",
          "G",
          "GF",
          "GI",
          "GN",
          "GR",
          "GU",
          "H",
          "HA",
          "HB",
          "HM",
          "HO",
          "HY",
          "I",
          "J",
          "JA",
          "K",
          "KE",
          "KH",
          "KI",
          "KN",
          "KT",
          "KW",
          "KY",
          "L",
          "LC",
          "M",
          "MA",
          "MB",
          "MC",
          "ME",
          "MG",
          "MI",
          "MO",
          "MR",
          "MU",
          "N",
          "NA",
          "ND",
          "NO",
          "NR",
          "OB",
          "OR",
          "P",
          "PA",
          "PL",
          "Q",
          "QU",
          "R",
          "S",
          "SG",
          "SH",
          "SK",
          "SW",
          "SY",
          "T",
          "TE",
          "U",
          "UR",
          "V",
          "W",
          "WA",
          "WG",
          "WL",
          "WN",
          "WR",
          "WW",
          "X",
          "Y",
          "YA",
          "YM",
          "YO",
          "Z",
          "ZC",
          "ZD",
          "ZH",
          "ZJ",
          "ZK",
          "ZL",
          "ZM",
          "ZO",
          "ZP",
          "ZQ",
          "ZR",
          "ZT",
          "ZV",
          "ZW",
          "ZX",
          "ZY"
        ],
        "type": "string",
        "description": "This is Centres for Australia. A centre is a town where any activity connected with the wool industry takes place. The codes used in transmissions are those defined in the Australian Wool Selling Regulation.<br />A: Australia - ADELAIDE<br />AD: Australia - Ardlethan<br />AR: Australia - Armidale (NSW)<br />AU: Australia - AUSTRALIA (AWEX internal only)<br />B: Australia - BRISBANE<br />BA: Australia - Benalla<br />BK: Australia - Bourke<br />BL: Australia - Ballarat<br />BM: Australia - Barham<br />BO: Australia - Boorowa<br />BR: Australia - Bordertown<br />BT: Australia - Bathurst<br />C: Australia - Cooma<br />CA: Australia - Casterton<br />CB: Australia - Coonabarabran<br />CC: Australia - Culcairn<br />CL: Australia - Coleraine<br />CN: Australia - Condoblin<br />CO: Australia - Cootamundra<br />CR: Australia - Corowa<br />CU: Australia - Cunnamulla<br />CW: Australia - Crookwell<br />D: Australia - Bendigo<br />DE: Australia - Deniliquin<br />DO: Australia - Dubbo<br />DR: Australia - Canowindra<br />E: Australia - Echuca<br />ER: Australia - Euroa<br />ES: Australia - Esperance<br />F: Australia - FREMANTLE<br />G: Australia - GEELONG<br />GF: Australia - Grenfell<br />GI: Australia - Glenn Innes<br />GN: Australia - Gunning<br />GR: Australia - Griffith<br />GU: Australia - Guyra<br />H: Australia - Hobart<br />HA: Australia - Harden<br />HB: Australia - Holbrook<br />HM: Australia - Hamilton<br />HO: Australia - Horsham<br />HY: Australia - Hay<br />I: Australia - Narrabri<br />J: Australia - Parkes<br />JA: Australia - Jamestown<br />K: Australia - Warracknabeal<br />KE: Australia - Kerang<br />KH: Australia - Keith<br />KI: Australia - Kangaroo Island<br />KN: Australia - Kingston<br />KT: Australia - Katanning<br />KW: Australia - Wagga Wagga<br />KY: Australia - Kyneton<br />L: Australia - LAUNCESTON<br />LC: Australia - Lane Cove (AWEX internal only)<br />M: Australia - MELBOURNE<br />MA: Australia - Mansfield<br />MB: Australia - Murray Bridge<br />MC: Australia - Macarthur<br />ME: Australia - Melton<br />MG: Australia - Mount Gambier<br />MI: Australia - Mildura<br />MO: Australia - Moree<br />MR: Australia - Maryborough<br />MU: Australia - Mudgee<br />N: Australia - NEWCASTLE<br />NA: Australia - Narrandera<br />ND: Australia - Goondiwindi<br />NO: Australia - Northam<br />NR: Australia - Naracoorte<br />OB: Australia - Oberon<br />OR: Australia - Orange<br />P: Australia - Portland<br />PA: Australia - Cowra<br />PL: Australia - Port Lincoln<br />Q: Australia - Yarrawonga<br />QU: Australia - Queanbeyan<br />R: Australia - GOULBURN<br />S: Australia - SYDNEY<br />SG: Australia - St George<br />SH: Australia - Shepparton<br />SK: Australia - Skipton<br />SW: Australia - Swan Hill<br />SY: Australia - Seymour<br />T: Australia - Inverell<br />TE: Australia - Temora<br />U: Australia - Auburn<br />UR: Australia - Uralla<br />V: Australia - Forbes<br />W: Australia - Tamworth<br />WA: Australia - Warren<br />WG: Australia - Walgett<br />WL: Australia - Walcha<br />WN: Australia - Wellington<br />WR: Australia - Wangaratta<br />WW: Australia - West Wyalong<br />X: Australia - Ararat<br />Y: Australia - Albury<br />YA: Australia - Yass<br />YM: Australia - Yarram<br />YO: Australia - Young<br />Z: Australia - Albany<br />ZC:Christchurch - New Zealand<br />ZD: Dunedin - New Zealand<br />ZH: Blumenthal - Germany<br />ZJ: Biella - Italy<br />ZK: Grisignano - Italy<br />ZL: Mosgiel - New Zealand<br />ZM: Nanjing - China<br />ZO: Keelung - Taiwan<br />ZP: Shanghai - China<br />ZQ: Qingdao - China<br />ZR: Zhangjiagang - China<br />ZT: Timaru - New Zealand<br />ZV: Invercargill - New Zealand<br />ZW:Wellington - New Zealand<br />ZX: Napier – New Zealand<br />ZY: Ashburton – New Zealand"
      },
      "CentreCodeChina": {
        "enum": [
          "NA",
          "SH",
          "QI",
          "ZH"
        ],
        "type": "string",
        "description": "This is Centres for China. A centre is a town where any activity connected with the wool industry takes place. The codes used in transmissions are those defined in the Australian Wool Selling Regulation.<br />NA: Nanjing - China<br />SH: Shanghai - China<br />QI: Qingdao - China<br />ZH: Zhangjiagang - China"
      },
      "CentreCodeGermany": {
        "enum": [
          "BL"
        ],
        "type": "string",
        "description": "This is Centres for Germany. A centre is a town where any activity connected with the wool industry takes place. The codes used in transmissions are those defined in the Australian Wool Selling Regulation.<br />BL: Blumenthal - Germany"
      },
      "CentreCodeItaly": {
        "enum": [
          "BI",
          "GR"
        ],
        "type": "string",
        "description": "This is Centres for Italy. A centre is a town where any activity connected with the wool industry takes place. The codes used in transmissions are those defined in the Australian Wool Selling Regulation.<br />BI: Biella - Italy<br />GR: Grisignano - Italy"
      },
      "CentreCodeNewZealand": {
        "enum": [
          "A",
          "AW",
          "B",
          "BL",
          "BT",
          "C",
          "CV",
          "D",
          "F",
          "FA",
          "G",
          "GD",
          "GO",
          "HA",
          "HS",
          "I",
          "J",
          "K",
          "KA",
          "KP",
          "L",
          "LO",
          "LU",
          "M",
          "MA",
          "MK",
          "MT",
          "MU",
          "N",
          "NE",
          "O",
          "OH",
          "OI",
          "OM",
          "OT",
          "P",
          "PT",
          "PU",
          "R",
          "RG",
          "RI",
          "S",
          "SA",
          "SH",
          "SY",
          "T",
          "TA",
          "TE",
          "TH",
          "TP",
          "U",
          "V",
          "W",
          "WH",
          "WI",
          "WR",
          "WT",
          "WU",
          "X",
          "Y",
          "YP",
          "Z"
        ],
        "type": "string",
        "description": "This is Centres for New Zealand. A centre is a town where any activity connected with the wool industry takes place. The codes used in transmissions are those defined in the Australian Wool Selling Regulation.<br />A: New Zealand - Auckland<br />AW: New Zealand - Awatoto<br />B: New Zealand - Cambridge<br />BL: New Zealand - Blenheim<br />BT: New Zealand - Bunnythorpe<br />C: New Zealand - Christchurch<br />CV: New Zealand - Clive<br />D: New Zealand - Dunedin<br />F: New Zealand - Feilding<br />FA: New Zealand - Fairlie<br />G: New Zealand - Gisborne<br />GD: New Zealand - Geraldine<br />GO: New Zealand - Gore<br />HA: New Zealand - Hawera<br />HS: New Zealand - Hastings<br />I: New Zealand - Invercargill<br />J: New Zealand - Tapanui<br />K: New Zealand - Te Kuiti<br />KA: New Zealand - Kakariki<br />KP: New Zealand - Kaiapoi<br />L: New Zealand - Mosgiel<br />LO: New Zealand - Longburn<br />LU: New Zealand - Lumsden<br />M: New Zealand - Masterton<br />MA: New Zealand - Mangatinoka<br />MK: New Zealand - Motueka<br />MT: New Zealand - Milton<br />MU: New Zealand - Mataura<br />N: New Zealand - Napier<br />NE: New Zealand - Nelson<br />O: New Zealand - Oamaru<br />OH: New Zealand - Ohinewai<br />OI: New Zealand - Ohai<br />OM: New Zealand - Omakau<br />OT: New Zealand - Otorohonga<br />P: New Zealand - Palmerston North<br />PT: New Zealand - Pahiatua<br />PU: New Zealand - Putaruru<br />R: New Zealand - Rotorua<br />RG: New Zealand - Rangiora<br />RI: New Zealand - Riwaka<br />S: New Zealand - Ashburton<br />SA: New Zealand - Saltwater Creek<br />SH: New Zealand - Shannon<br />SY: New Zealand - Sydney<br />T: New Zealand - Timaru<br />TA: New Zealand - Tapanui<br />TE: New Zealand - TeAnau<br />TH: New Zealand - Taihape<br />TP: New Zealand - Te Puke<br />U: New Zealand - Taumaruniu<br />V: New Zealand - Dannevirke<br />W: New Zealand - Wellington<br />WH: New Zealand - Whakatu<br />WI: New Zealand - Whakatu Industrial Park<br />WR: New Zealand - Wairoa<br />WT: New Zealand - Winton<br />WU: New Zealand - Waikuku<br />X: New Zealand - Wanganui<br />Y: New Zealand - Whangarei<br />YP: New Zealand - Waipukurau<br />Z: New Zealand - Taupo"
      },
      "CentreCodeTaiwan": {
        "enum": [
          "KE"
        ],
        "type": "string",
        "description": "This is Centres for Taiwan. A centre is a town where any activity connected with the wool industry takes place. The codes used in transmissions are those defined in the Australian Wool Selling Regulation.<br />KE: Keelung - Taiwan"
      },
      "SoftwareIdentifier": {
        "type": "object",
        "properties": {
          "softwareCompany": {
            "$ref": "#/components/schemas/SoftwareCompany"
          },
          "version": {
            "pattern": "-?\\d{1,4}",
            "type": "integer",
            "description": "Version no. e.g. 2400",
            "format": "int32",
            "nullable": true
          },
          "programName": {
            "maxLength": 4,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SoftwareCompany": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        "type": "integer",
        "description": "1: Talman<br />2: Symbotic<br />3: Jumbuck/Datacon<br />4: Jemalong<br />5: NA - no value<br />6: Modiano<br />7: AWH<br />6: AWTA",
        "format": "int32"
      },
      "TransferConfig": {
        "required": [
          "transferType"
        ],
        "type": "object",
        "properties": {
          "transferType": {
            "$ref": "#/components/schemas/TransferType"
          },
          "finalReceiverList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organisation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to identify document transfer type: Restrict, Unrestrict, and Exlcude.\r\n\r\nOnly used for data retrieval. Do not include it in the response."
      },
      "TransferType": {
        "enum": [
          "Unrestrict",
          "Restrict",
          "Exclude"
        ],
        "type": "string",
        "description": "Unrestrict: Send document to all members<br />Restrict: Send document to appointed members<br />Exclude: Send to all members excluding the appointed members"
      },
      "TestRequestsVerificationDetail": {
        "required": [
          "testDataHeader",
          "testRequestVerification"
        ],
        "type": "object",
        "properties": {
          "testDataHeader": {
            "$ref": "#/components/schemas/TestDataHeader"
          },
          "testRequestVerification": {
            "$ref": "#/components/schemas/TestRequestVerification"
          },
          "contractLimitRequirements": {
            "$ref": "#/components/schemas/ContractLimitRequirements"
          },
          "darkAndMedullatedFibreRiskDetails": {
            "$ref": "#/components/schemas/DarkAndMedullatedFibreRiskDetails"
          },
          "bales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Bale"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestDataHeader": {
        "required": [
          "bales",
          "client",
          "gross",
          "lotIdentityOrGroupName",
          "tare"
        ],
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/Organisation"
          },
          "season": {
            "maxLength": 2,
            "minLength": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "saleIdentity": {
            "$ref": "#/components/schemas/SaleIdentity"
          },
          "centreStorage": {
            "$ref": "#/components/schemas/Centre"
          },
          "lotIdentityOrGroupName": {
            "maxLength": 6,
            "minLength": 1,
            "type": "string"
          },
          "weightNote": {
            "$ref": "#/components/schemas/WeightNote"
          },
          "clientsCrossReference": {
            "maxLength": 8,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "bales": {
            "pattern": "-?\\d{1,4}",
            "type": "integer",
            "format": "int32"
          },
          "gross": {
            "$ref": "#/components/schemas/Weight"
          },
          "tare": {
            "$ref": "#/components/schemas/Weight"
          },
          "regrabSampleWeight": {
            "$ref": "#/components/schemas/Weight"
          },
          "mulesingStatus": {
            "$ref": "#/components/schemas/MulesingStatus"
          },
          "declaredGross": {
            "$ref": "#/components/schemas/Weight"
          },
          "declaredTare": {
            "$ref": "#/components/schemas/Weight"
          },
          "lotType": {
            "$ref": "#/components/schemas/LotType"
          },
          "centreAuction": {
            "$ref": "#/components/schemas/Centre"
          },
          "sourceCode": {
            "$ref": "#/components/schemas/SourceCode"
          },
          "reportingFlag": {
            "$ref": "#/components/schemas/ReportingFlag"
          },
          "scouredType": {
            "$ref": "#/components/schemas/ScouredType"
          },
          "gstAmount": {
            "$ref": "#/components/schemas/Currency"
          },
          "isGSTApplicable": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether the GST is aplicable.\r\n\r\ntrue: applicable.\r\n\r\nfalse: not applicable.",
            "nullable": true
          },
          "isCompanyAbnApplicable": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether the Company ABN is applicable to invoice. \r\n\r\ntrue: applicable.\r\n\r\nfalse: not applicable.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaleIdentity": {
        "required": [
          "saleNumber",
          "sellingCentreType"
        ],
        "type": "object",
        "properties": {
          "sellingCentreType": {
            "maxLength": 2,
            "minLength": 1,
            "type": "string",
            "description": "The following codes are reserved for current and historical open cry auction selling centres:\r\n            \r\nSellingCentre/Type (New Zealand):\r\n            \r\nC: Christchurch; \r\n\r\nN: Napier.\r\n\r\n            \r\nSellingCentre/Type (Australia):\r\n            \r\nA: Adelaide; \r\n\r\nAU: Australia; \r\n\r\nB: Brisbane; \r\n\r\nF: Fremantle; \r\n\r\nG: Geelong; \r\n\r\nL: Launceston; \r\n\r\nM: Melbourne; \r\n\r\nN: Newcastle; \r\n\r\nR: Goulburn; \r\n\r\nS: Sydney.\r\n\r\n\r\nThe following codes are allocated for alternative sale types:\r\n            \r\nPS: Private Sales; \r\n\r\nT: Auctions Plus Sales.\r\n            \r\n\r\nPlease contact the WIEDPUG Secretary for the latest list of reserved and allocated codes."
          },
          "saleNumber": {
            "maxLength": 2,
            "minLength": 1,
            "pattern": "-?\\d{1,2}",
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A group field of SellingCentre/Type and Sale Number\r\n            \r\nFrom: The current value that the Sale Identity is to be changed from.\r\n            \r\nTo: The new value that the Sale Identity is to be changed to."
      },
      "WeightNote": {
        "required": [
          "prefix",
          "suffix"
        ],
        "type": "object",
        "properties": {
          "prefix": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string"
          },
          "suffix": {
            "maxLength": 7,
            "minLength": 1,
            "pattern": "-?\\d{1,7}",
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Weight": {
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "pattern": "^-?\\d{1,6}\\.\\d{2}$",
            "type": "number",
            "format": "double"
          },
          "unit": {
            "$ref": "#/components/schemas/WeightUnit"
          }
        },
        "additionalProperties": false
      },
      "WeightUnit": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: Kilograms<br />1: Pounds<br />2: Grams",
        "format": "int32"
      },
      "MulesingStatus": {
        "enum": [
          "NM",
          "LN",
          "CM",
          "AA",
          "M",
          "ND"
        ],
        "type": "string",
        "description": "NM: Non Mulesed<br />LN: Liquid Nitrogen<br />CM: Ceased Mulesing<br />AA: Mulesed with Analgesic &/or Anaesthetic<br />M: Mulesed<br />ND: Not Declared"
      },
      "LotType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "description": "A code used to describe wool lot preparation. It is not wool type. `*` wool meets clip preparation guidelines.`#` wool does not necessarily meet clip preparation guidelines<br />1: (Suffix - P) Classed Grower Lot *<br />2: (Suffix - M) Objectively Matched Lot<br />3: (Suffix - J) Combined Certificate<br />4: (Suffix - I) Subjectively Matched Interlot<br />5: (Suffix - B) Other Bulk Class Lot #<br />6: Not Used<br />7: (Suffix - N) Objectively Matched Interlot<br />8: (Suffix - Q) Classed Bulk Class Lot – Quality Managed *<br />9: (Suffix - D) Other Grower Lot #",
        "format": "int32"
      },
      "SourceCode": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Source of the lot presented for sale.<br />1: Grower<br />2: Dealer<br />3: BulkClass",
        "format": "int32"
      },
      "ReportingFlag": {
        "enum": [
          "R",
          "C",
          "U"
        ],
        "type": "string",
        "description": "R: Report, results for this test are supplied for information only<br />C: Certificate results for this test are certified<br />U: This lot is untested and there are no certificate results"
      },
      "ScouredType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "0: Not Scoured<br />1: Scoured Aqueous<br />2: Scoured Dual Solvent<br />3: Carbonised<br />4: Mohair<br />5: Noils<br />6: Slipe",
        "format": "int32"
      },
      "Currency": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "pattern": "^-?\\d{1,10}\\.\\d{2}$",
            "type": "number",
            "description": "Total up to 12 digits with 2 digits after the decimal point.",
            "format": "double"
          },
          "currencyUnit": {
            "$ref": "#/components/schemas/CurrencyUnit"
          }
        },
        "additionalProperties": false
      },
      "CurrencyUnit": {
        "enum": [
          "AUD",
          "BEF",
          "NZD",
          "BGP",
          "FRF",
          "DEM",
          "ITL",
          "CNY",
          "ANG",
          "TWD",
          "ZAR",
          "USD",
          "EUR"
        ],
        "type": "string",
        "description": "AUD: Australian Dollars<br />BEF: Belgian Francs<br />NZD: New Zealand Dollars<br />BGP: British Pounds<br />FRF: French Francs<br />DEM: German Deutsche Marks<br />ITL: Italy Lire<br />CNY: Chinese Yuan<br />ANG: Netherlands Antilles Guilders<br />BEF: Taiwan New Dollars<br />ZAR: South Africa Rand<br />USD: USA Dollars<br />EUR: Euro"
      },
      "TestRequestVerification": {
        "required": [
          "hashTotal",
          "isPreviousDataToBeUpdated",
          "laboratory"
        ],
        "type": "object",
        "properties": {
          "laboratory": {
            "$ref": "#/components/schemas/Laboratory"
          },
          "growerCode": {
            "maxLength": 8,
            "minLength": 1,
            "type": "string",
            "description": "Optional alphanumeric field for grower code.",
            "nullable": true
          },
          "growerName": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "Optional alphanumeric field for grower name.",
            "nullable": true
          },
          "coreSampleWeight": {
            "$ref": "#/components/schemas/Weight"
          },
          "coreTestSamplingDate": {
            "maxLength": 10,
            "minLength": 1,
            "pattern": "/(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/",
            "type": "string",
            "description": "Date value in ISO standard UTC date format. e.g. 2024-03-21 (YYYY-MM-DD).",
            "format": "date",
            "nullable": true
          },
          "coresPerBale": {
            "pattern": "-?\\d{1,2}",
            "type": "integer",
            "description": "Optional numeric field for cores per bale.",
            "format": "int32",
            "nullable": true
          },
          "grabsPerBale": {
            "pattern": "-?\\d{1,2}",
            "type": "integer",
            "description": "Optional numeric field for grabs per bale.",
            "format": "int32",
            "nullable": true
          },
          "isPreviousDataToBeUpdated": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether data sent on a previous transmission is to be updated by data in the current transmission.\r\n\r\ntrue: Update previous data.\r\n\r\nfalse: Do not update previous data."
          },
          "hashTotal": {
            "pattern": "-?\\d{1,8}",
            "type": "integer",
            "description": "Required numeric field for hash total.",
            "format": "int32"
          },
          "isYieldAndMicronTestRequired": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether Yield And Laserscan Test is required.\r\n\r\ntrue: Yield And Laserscan Test is required.\r\n\r\nfalse: Yield And Laserscan Test is not required.",
            "nullable": true
          },
          "isLengthAndStrengthTestRequired": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether Length And Strength Test is required.\r\n\r\ntrue: Length And Strength Test is required.\r\n\r\nfalse: Length And Strength Test is not required.",
            "nullable": true
          },
          "isLengthOnlyTestRequired": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether Length Only Test is required.\r\n\r\ntrue: Length Only Test is required.\r\n\r\nfalse: Length Only Test is not required.",
            "nullable": true
          },
          "isColourTestRequired": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether Colour Test is required.\r\n\r\ntrue: Colour Test is required.\r\n\r\nfalse: Colour Test is not required.",
            "nullable": true
          },
          "isLaserscanTestRequired": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether Laserscan Test is required.\r\n\r\ntrue: Laserscan Test is required.\r\n\r\nfalse: Laserscan Test is not required.",
            "nullable": true
          },
          "isAirflowTestRequired": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether Airflow Test is required.\r\n\r\ntrue: Airflow Test is required.\r\n\r\nfalse: Airflow Test is not required.",
            "nullable": true
          },
          "isOFDATestRequired": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether OFDA Test is required.\r\n\r\ntrue: OFDA Test is required.\r\n\r\nfalse: OFDA Test is not required.",
            "nullable": true
          },
          "isDarkAndMedullatedFibreTestRequired": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether Dark And Medullated Fibre Test is required.\r\n\r\ntrue: Dark And Medullated Fibre Test is required.\r\n\r\nfalse: Dark And Medullated Fibre Test is not required.",
            "nullable": true
          },
          "isPesticideResidueTestRequired": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether Pesticide Residue Test is required.\r\n\r\ntrue: Pesticide Residue Test is required.\r\n\r\nfalse: Pesticide Residue Test is not required.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Laboratory": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "The code for a Test House.<br />1: Australian Wool Testing Authority<br />2: N.Z. Wool Testing Authority<br />3: N.Z. Wool Testing Service<br />4: South African Wool Testing Authority",
        "format": "int32"
      },
      "ContractLimitRequirements": {
        "type": "object",
        "properties": {
          "micronMin": {
            "pattern": "^-?\\d{1,2}\\.\\d{1}$",
            "type": "number",
            "description": "Minimum micron, optional decimal with one digit precision.",
            "format": "double",
            "nullable": true
          },
          "micronMax": {
            "pattern": "^-?\\d{1,2}\\.\\d{1}$",
            "type": "number",
            "description": "Maximum micron, optional decimal with one digit precision.",
            "format": "double",
            "nullable": true
          },
          "colourYZMin": {
            "pattern": "^-?\\d{1,3}\\.\\d{1}$",
            "type": "number",
            "description": "Minimum colour Y-Z, optional decimal with one digit precision.",
            "format": "double",
            "nullable": true
          },
          "colourYZMax": {
            "pattern": "^-?\\d{1,3}\\.\\d{1}$",
            "type": "number",
            "description": "Maximum colour Y-Z, optional decimal with one digit precision.",
            "format": "double",
            "nullable": true
          },
          "vmbMin": {
            "pattern": "^-?\\d{1}\\.\\d{2}$",
            "type": "number",
            "description": "Minimum VMB, optional decimal with two digits precision.",
            "format": "double",
            "nullable": true
          },
          "vmbMax": {
            "pattern": "^-?\\d{1}\\.\\d{2}$",
            "type": "number",
            "description": "Maximum VMB, optional decimal with two digits precision.",
            "format": "double",
            "nullable": true
          },
          "woolBaseMin": {
            "pattern": "^-?\\d{1,2}\\.\\d{2}$",
            "type": "number",
            "description": "Minimum wool base, optional decimal with two digits precision.",
            "format": "double",
            "nullable": true
          },
          "woolBaseMax": {
            "pattern": "^-?\\d{1,2}\\.\\d{2}$",
            "type": "number",
            "description": "Maximum wool base, optional decimal with two digits precision.",
            "format": "double",
            "nullable": true
          },
          "dichloromethaneDryBasisMin": {
            "pattern": "^-?\\d{1,2}\\.\\d{2}$",
            "type": "number",
            "description": "Minimum dichloromethane on a dry basis, optional decimal with two digits precision.",
            "format": "double",
            "nullable": true
          },
          "dichloromethaneDryBasisMax": {
            "pattern": "^-?\\d{1,2}\\.\\d{2}$",
            "type": "number",
            "description": "Maximum dichloromethane on a dry basis, optional decimal with two digits precision.",
            "format": "double",
            "nullable": true
          },
          "conditioningMassMin": {
            "$ref": "#/components/schemas/Weight"
          },
          "conditioningMassMax": {
            "$ref": "#/components/schemas/Weight"
          },
          "lacBarbeMin": {
            "pattern": "-?\\d{1,3}",
            "type": "integer",
            "description": "Minimum LAC Barbe, optional numeric field.",
            "format": "int32",
            "nullable": true
          },
          "lacBarbeMax": {
            "pattern": "-?\\d{1,3}",
            "type": "integer",
            "description": "Maximum LAC Barbe, optional numeric field.",
            "format": "int32",
            "nullable": true
          },
          "lacHauteurMin": {
            "pattern": "-?\\d{1,3}",
            "type": "integer",
            "description": "Minimum LAC Hauteur, optional numeric field.",
            "format": "int32",
            "nullable": true
          },
          "lacHauteurMax": {
            "pattern": "-?\\d{1,3}",
            "type": "integer",
            "description": "Maximum LAC Hauteur, optional numeric field.",
            "format": "int32",
            "nullable": true
          },
          "lacHauteurUnder20Min": {
            "pattern": "-?\\d{1,3}",
            "type": "integer",
            "description": "Minimum LAC Hauteur under 20, optional numeric field.",
            "format": "int32",
            "nullable": true
          },
          "lacHauteurUnder20Max": {
            "pattern": "-?\\d{1,3}",
            "type": "integer",
            "description": "Maximum LAC Hauteur under 20, optional numeric field.",
            "format": "int32",
            "nullable": true
          },
          "lacHauteurUnder40Min": {
            "pattern": "-?\\d{1,3}",
            "type": "integer",
            "description": "Minimum LAC Hauteur under 40, optional numeric field.",
            "format": "int32",
            "nullable": true
          },
          "lacHauteurUnder40Max": {
            "pattern": "-?\\d{1,3}",
            "type": "integer",
            "description": "Maximum LAC Hauteur under 40, optional numeric field.",
            "format": "int32",
            "nullable": true
          },
          "lacHauteurCVPercentMin": {
            "pattern": "-?\\d{1,3}",
            "type": "integer",
            "description": "Minimum LAC Hauteur CV(%), optional numeric field.",
            "format": "int32",
            "nullable": true
          },
          "lacHauteurCVPercentMax": {
            "pattern": "-?\\d{1,3}",
            "type": "integer",
            "description": "Maximum LAC Hauteur CV(%), optional numeric field.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DarkAndMedullatedFibreRiskDetails": {
        "required": [
          "ageFrom",
          "declaredBreed",
          "declaredWoolCategory",
          "declaredWoolSubCategory",
          "isContactingWithExoticBreeds",
          "isCrutched",
          "sex"
        ],
        "type": "object",
        "properties": {
          "declaredBreed": {
            "$ref": "#/components/schemas/DeclaredBreed"
          },
          "declaredWoolSubCategory": {
            "$ref": "#/components/schemas/DeclaredWoolSubCategory"
          },
          "declaredWoolCategory": {
            "$ref": "#/components/schemas/DeclaredWoolCategory"
          },
          "declaredQualifierCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeclaredQualifierCode"
            },
            "nullable": true
          },
          "declaredQualifierScale": {
            "$ref": "#/components/schemas/DeclaredQualifierScale"
          },
          "isContactingWithExoticBreeds": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether it contact with exotic breeds.\r\n            \r\ntrue: contact with exotic breeds.\r\n            \r\nfalse: not contact with exotic breeds."
          },
          "isCrutched": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether it is crutched.\r\n\r\ntrue: crutched.\r\n            \r\nfalse: not crutched."
          },
          "isCrutchedWithin3MonthsOfShearing": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether crutching within 3 months of shearing.\r\n            \r\ntrue: yes.\r\n            \r\nfalse: no.",
            "nullable": true
          },
          "sex": {
            "$ref": "#/components/schemas/Sex"
          },
          "ageFrom": {
            "pattern": "-?\\d{1,2}",
            "type": "integer",
            "description": "Required numeric field for minimum age.",
            "format": "int32"
          },
          "ageTo": {
            "pattern": "-?\\d{1,2}",
            "type": "integer",
            "description": "Optional numeric field for maximum age.",
            "format": "int32",
            "nullable": true
          },
          "darkAndMedullatedFibreRiskBroker": {
            "$ref": "#/components/schemas/DarkAndMedullatedFibreRiskBroker"
          },
          "darkandMedullatedFibreRisk": {
            "$ref": "#/components/schemas/DarkAndMedullatedFibreRisk"
          },
          "certificateIdentity": {
            "$ref": "#/components/schemas/CertificateIdentity"
          },
          "woolBase": {
            "pattern": "^-?\\d{1,2}\\.\\d{2}$",
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "dmfrErrorFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of DMFR Error Field, each field should be a numeric string with up to two digits.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeclaredBreed": {
        "enum": [
          "A",
          "M",
          "X",
          "D",
          "T",
          "R"
        ],
        "type": "string",
        "description": "A: Australian Superfine<br />M: Merino<br />X: Crossbred<br />D: Downs<br />T: Carpet<br />R: Sheds Fibres"
      },
      "DeclaredWoolSubCategory": {
        "enum": [
          "W",
          "L",
          "U",
          "K",
          "G",
          "O",
          "N",
          "T"
        ],
        "type": "string",
        "description": "W: Combing Weaners & Lambs<br />L: Carding Lambs<br />U: Plucked & Dead<br />K: Shorn from Skins<br />G: Fellmongered<br />O: Overgrown<br />N: Non-conforming lot<br />T: Not required"
      },
      "DeclaredWoolCategory": {
        "enum": [
          "F",
          "P",
          "B",
          "C",
          "Z"
        ],
        "type": "string",
        "description": "F: Fleece<br />P: Pieces<br />B: Bellies<br />C: Crutchings<br />Z: Locks"
      },
      "DeclaredQualifierCode": {
        "enum": [
          "T",
          "H",
          "M",
          "S",
          "C",
          "J",
          "A",
          "K",
          "Q",
          "E",
          "N",
          "R",
          "G",
          "D",
          "V",
          "P",
          "Y",
          "F",
          "U"
        ],
        "type": "string",
        "description": "Optional enum type for qualifier code.<br />T: Qualifier not required<br />H: Unscourable colour<br />M: Scourable colour/creamy<br />S: Dark Stain<br />C: Cotts<br />J: Jowls<br />A: Dermatitis<br />K: Kemp / Medullated<br />Q: Dags<br />E: Necks (Not Scaled)<br />N: Water Stain<br />R: Brands<br />G: Doggy (Not Scaled)<br />D: Mud<br />V: Skin pieces<br />P: Shanks<br />Y: Black & Grey<br />F: Soft Cotts<br />U: Sweat/Frib"
      },
      "DeclaredQualifierScale": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "0: No scale/qualifier code is T<br />1: Light/Odd<br />2: Medium<br />3: Heavy/Line of…",
        "format": "int32"
      },
      "Sex": {
        "enum": [
          "E",
          "W",
          "R",
          "M"
        ],
        "type": "string",
        "description": "E: Ewes<br />W: Wethers<br />R: Rams<br />M: Mixed"
      },
      "DarkAndMedullatedFibreRiskBroker": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "1: Risk Level 1 (lowest)<br />2: Risk Level 2<br />3: Risk Level 3<br />4: Risk Level 4<br />5: Risk Level 5<br />6: Risk Level 6",
        "format": "int32"
      },
      "DarkAndMedullatedFibreRisk": {
        "enum": [
          "E",
          "N",
          "D",
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ],
        "type": "string",
        "description": "E: Error in Processing<br />N: Not Applicable<br />D: Not Declared<br />1: Risk Level 1 (lowest)<br />2: Risk Level 2<br />3: Risk Level 3<br />4: Risk Level 4<br />5: Risk Level 5<br />6: Risk Level 6"
      },
      "CertificateIdentity": {
        "required": [
          "certificateIDCD",
          "certificateIDNumber",
          "certificateIDPrefix",
          "certificateIDSuffix"
        ],
        "type": "object",
        "properties": {
          "certificateIDPrefix": {
            "$ref": "#/components/schemas/CertificateIDPrefix"
          },
          "certificateIDNumber": {
            "maxLength": 8,
            "minLength": 1,
            "type": "integer",
            "format": "int32"
          },
          "certificateIDSuffix": {
            "$ref": "#/components/schemas/CertificateIDSuffix"
          },
          "certificateIDCD": {
            "maxLength": 1,
            "minLength": 1,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CertificateIDPrefix": {
        "enum": [
          2,
          3,
          6
        ],
        "type": "integer",
        "description": "2: Sydney Laboratory<br />3: Melbourne Laboratory<br />6: Fremantle Laboratory",
        "format": "int32"
      },
      "CertificateIDSuffix": {
        "enum": [
          "B",
          "C",
          "D",
          "F",
          "I",
          "J",
          "L",
          "M",
          "N",
          "Q",
          "P",
          "R",
          "W",
          "Y"
        ],
        "type": "string",
        "description": "B: Bulk Class<br />C: Colour<br />D: PTC (Pre-Sale Test Certificate – Other Grower Lot)<br />F: Premium Test<br />I: Subjectively Appraised Interlot<br />J: Combination - Yield & Micron, Length & Strength, Colour<br />L: Length & Strength<br />M: Objectively Matched Lot<br />N: Objectively matched Interlot<br />Q: Bulk Class – Quality Managed<br />P: PTC (Pre-sale Test Certificate - Classed Grower Lot)<br />R: Guidance Report<br />W: Scoured Wool<br />Y: Post sale Core Test"
      },
      "Bale": {
        "required": [
          "baleHeader"
        ],
        "type": "object",
        "properties": {
          "baleHeader": {
            "$ref": "#/components/schemas/BaleHeader"
          },
          "baleDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaleDetail"
            },
            "nullable": true
          },
          "propertyIdentificationCodes": {
            "maxItems": 8,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Property Identification Code - the property code to identify the source of the wool.\r\n\r\nThis field is not used in New Zealand transmission.\r\n\r\nFor TRV only.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BaleHeader": {
        "required": [
          "areaOfOrigin",
          "baleDescription",
          "brand"
        ],
        "type": "object",
        "properties": {
          "brand": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "baleDescription": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "areaOfOrigin": {
            "maxLength": 4,
            "minLength": 1,
            "type": "string"
          },
          "bales": {
            "maxLength": 4,
            "minLength": 1,
            "pattern": "-?\\d{1,4}",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "locationWithinStore": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BaleDetail": {
        "required": [
          "baleDetailType",
          "baleNumber"
        ],
        "type": "object",
        "properties": {
          "baleNumber": {
            "maxLength": 5,
            "minLength": 1,
            "type": "string"
          },
          "baleDetailType": {
            "$ref": "#/components/schemas/BaleDetailType"
          },
          "showBaleIndicator": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Property for Greasy/Processed bale detail, not necessary for other types of bale details.",
            "nullable": true
          },
          "baleRenumber": {
            "maxLength": 5,
            "minLength": 1,
            "type": "string",
            "description": "Property for Renumber BaleDetail, not necessary for other types of bale details.",
            "nullable": true
          },
          "unitNumber": {
            "pattern": "-?\\d{1,5}",
            "type": "integer",
            "description": "Property for Tripacks BaleDetail, not necessary for other types of bale details.",
            "format": "int32",
            "nullable": true
          },
          "gross": {
            "$ref": "#/components/schemas/Weight"
          },
          "tare": {
            "$ref": "#/components/schemas/Weight"
          },
          "eBaleId": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BaleDetailType": {
        "enum": [
          "Renumbers",
          "GreasyOrProcessed",
          "Tripacks"
        ],
        "type": "string",
        "description": "Renumbers: Bale Details - Renumbers<br />GreasyOrProcessed: Bale Details - GreasyOrProcessed<br />Tripacks: Bale Details - Tripacks"
      },
      "ApiResult": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/ApiMessage"
          },
          "data": {
            "description": "Contains response data. e.g. Auction Catalogue",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A standard API response object used for all successful API responses"
      },
      "ApiMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "warningCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarningCode"
            },
            "nullable": true
          },
          "informationCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InformationCode"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WarningCode": {
        "enum": [
          "11",
          "12",
          "13",
          "18",
          "19",
          "20",
          "24",
          "DRVnn"
        ],
        "type": "string",
        "description": "A code to indicate the different types of errors.<br />11: Weight Note suffix is not numeric or has been omitted.<br />12: Number of bales is invalid or has been omitted.<br />13: Sale identification has been omitted.<br />18: Invalid Gross weight.<br />19: Invalid Tare weight.<br />20: Invalid Centre/Client code on pre-sale test request.<br />24: Incorrect PCTR Hash total.<br />DRVnn: Dark and Medullated Fibre Risk error where nn is the field number in error."
      },
      "InformationCode": {
        "enum": [
          "OK"
        ],
        "type": "string",
        "description": "A code to indicate the information.\r\n\r\nFor AC, PC LI and GI transmissions, one record will be sent for each Wool Sale Header Lots received.\r\n\r\nOK - aaaaaDATA RECEIVED OK FOR aann/nn dd/mm/yy ooooo LOTS nnnn\r\n\r\nWhere aann/nn = sale number/season\r\n    \r\ndd/mm/yy = sale date\r\n    \r\nooooo = selling organisation\r\n    \r\nnnnnn = number of lots\r\n    \r\nReason - You have sent data to the network and it has been received with no communication or transmission errors.\r\n\r\nAction - None.\r\n\r\nOR\r\n\r\nFor all other types of transmissions, one record will be sent for each transmission file received.\r\n\r\nOK - ALL aaaaa DATA RECEIVED OK\r\n\r\nReason - You have sent data to the network and it has been received with no communication or transmission errors.\r\n\r\nAction - None."
      },
      "ApiErrorResult": {
        "required": [
          "status",
          "title"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A URI reference [RFC3986] that identifies the problem type.\r\n\r\nThis specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). \r\n            \r\nWhen this member is not present, its value is assumed to be \"about:blank\".\r\n\r\ne.g. For 400 Bad Request, the \"type\" value can be \"https://tools.ietf.org/html/rfc9110#section-15.5.1\"",
            "nullable": true
          },
          "title": {
            "minLength": 1,
            "type": "string",
            "description": "A short, human-readable summary of the problem type.\r\n\r\nIt SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization(e.g., using proactive content negotiation; see[RFC7231], Section 3.4).\r\n\r\ne.g. \"One or more validation errors occurred.\""
          },
          "status": {
            "type": "integer",
            "description": "The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.",
            "format": "int32"
          },
          "detail": {
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem. e.g. 400, 403, or business relared problem etc.",
            "nullable": true
          },
          "errors": {
            "$ref": "#/components/schemas/CustomErrors"
          }
        },
        "additionalProperties": false,
        "description": "A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807."
      },
      "CustomErrors": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "Dictionary of errors in <PropertyName, ErrorDetails[]> format. e.g. errors: { \"name\": [\"Product name is required\"], \"category\": [\"Category name cannot be longer than 20 characters.\"]  }",
            "nullable": true
          },
          "errorCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorCode"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorCode": {
        "enum": [
          "DOXCT",
          "INVTC",
          "INVFR",
          "INVAC",
          "INVCR",
          "INVDO",
          "INVSO",
          "INVEX"
        ],
        "type": "string",
        "description": "A code to indicate the different types of errors.<br />DOXCT: Document originator does not match current transmitter.<br />INVTC: Invalid transfer config. All data rejected.<br />INVFR: Invalid/missing FinalReceiverList record. All data rejected.<br />INVAC: Invalid sale aann/nn dd/mm/yy ooooo. All data rejected.<br />INVCR: Current receiver not awtm. All data rejected.<br />INVDO: Invalid document originator code aaaaa. Data accepted.<br />INVSO: Warning! Invalid selling org AAAAA using doc orig AAAAA.<br />INVEX: Invalid excluded record."
      },
      "RequestForData": {
        "required": [
          "requestForDataType",
          "transmissionHeader"
        ],
        "type": "object",
        "properties": {
          "transmissionHeader": {
            "$ref": "#/components/schemas/TransmissionHeader"
          },
          "requestForDataType": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UseNetworkDateTimeRequestForDataType"
              },
              {
                "$ref": "#/components/schemas/DateTimeRangeRequestForDataType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "UseNetworkDateTimeRequestForDataType": {
        "required": [
          "isUsingNetworkDateTime"
        ],
        "type": "object",
        "properties": {
          "isUsingNetworkDateTime": {
            "maxLength": 5,
            "minLength": 4,
            "type": "boolean",
            "description": "A boolean value to indicate whether to use network datetime.\r\n\r\ntrue: use network datetime.\r\n\r\nfalse: not use."
          }
        },
        "additionalProperties": false
      },
      "DateTimeRangeRequestForDataType": {
        "required": [
          "startDateTimeStatusRequest"
        ],
        "type": "object",
        "properties": {
          "startDateTimeStatusRequest": {
            "maxLength": 20,
            "minLength": 1,
            "pattern": "/(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)Z$",
            "type": "string",
            "description": "Date and Time value in ISO 8601 standard UTC format. e.g. 2024-03-21T19:25:04Z",
            "format": "date-time"
          },
          "endDateTimeStatusRequest": {
            "maxLength": 20,
            "minLength": 1,
            "pattern": "/(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)Z$",
            "type": "string",
            "description": "Date and Time value in ISO 8601 standard UTC format. e.g. 2024-03-21T19:25:04Z",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestRequestsVerificationApiResult": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/ApiMessage"
          },
          "data": {
            "$ref": "#/components/schemas/TestRequestsVerification"
          }
        },
        "additionalProperties": false,
        "description": "A standard API response object used for all successful API responses"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Access Token that is added in the Authorization header of the HTTP request. Example: \"Authorization: Bearer {token}\". The JWT serves as a credential that proves the identity of the client to the server.",
        "name": "Authorization",
        "in": "header"
      },
      "oauth2": {
        "type": "oauth2",
        "description": "Authentication for client applications by providing Client ID and Client Secret for an JWT Access Token.",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/auth-server/oauth/token",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
